{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CRIPT Documentation \u00b6 CRIPT (A Community Resource for Innovation in Polymer Technology) is an ecosystem of data standards, web-based applications, and software frameworks for polymers. It is being developed by a collaborative team from MIT, NIST, Citrine Informatics, and Dow Chemicals. For more information about the project, please visit cript.mit.edu .","title":"Home"},{"location":"#cript-documentation","text":"CRIPT (A Community Resource for Innovation in Polymer Technology) is an ecosystem of data standards, web-based applications, and software frameworks for polymers. It is being developed by a collaborative team from MIT, NIST, Citrine Informatics, and Dow Chemicals. For more information about the project, please visit cript.mit.edu .","title":"CRIPT Documentation"},{"location":"about/","text":"Hi \u00b6","title":"Hi"},{"location":"about/#hi","text":"","title":"Hi"},{"location":"data-models/","text":"Overview \u00b6 As part of CRIPT's mission to develop a digital ecosystem for polymers, there was a need to generate a standard data model and schema to share polymer data. The following documentation details the way in which polymer data is represented and stored and within the CRIPT ecosystem. Importance \u00b6 Having accessible well-structured data is the foundation of cheminformatics. The complexity of polymer structures with the wide range of characterization techniques and properties poses significant challenges in the formation of databases. This has led to several small, disparate data sets. The data structure presented here provides a universal system to capture all relevant polymer data in a manner optimized for large databases. It is designed to allow anyone to contribute for the benefit of the polymer community; with to goal to ultimately accelerating the pace of material innovation. Value Proposition: Archiving system Eliminate the loss of data Saves money and time on replicating experiments Promotes good data recording practices Uniform structure Reduce time spent searching for data Increases completeness of data entered Effortless data sharing Gain access to large well structure data Enables machine learning and large data analytics Philosophy \u00b6 Reporting Guidelines \u00b6 Reporting guidelines refers to what information is required to be captured about an experiment. CRIPT has been designed with minimal reporting requirements as polymer data is highly variable in content and completeness. However, contributors of data are encouraged to provide as much data as possible as it ensures the polymer data has sufficient information to contextualize the data. Additionally, the more information provided will aid in the discoverability of the data. More specific reporting guidance can be found in the following documents. Vocabulary \u00b6 Vocabulary (controlled) is the set of terminology that provides unique identification and definition of datum. CRIPT provide an expert curated vocabulary for polymer data. Contributors are highly encouraged to stick to the official vocabulary when possible, as it ensures data uniformity. Data uniformity is necessary for successful exchange information, search, and data retrieval. CRIPT recognizes that the current vocabulary may not cover all polymer data that contributors desire to add to the database, thus CRIPT accepts any user-defined vocabulary such that it begins with a + . Contributors can petition for the addition of new official vocabulary by emailing cript@mit.edu with the term, brief description, preferred units, and explanation of why it should be added to the official vocabulary. Data exchange format \u00b6 Data exchange format is the specification of how data is encoded to be a computer-readable and -processable format. CRIPT structures data is formatted as a JSON files which are stored in MongoDB as BSON (a byte version of JSON). Thus, BSON data types are used. Data Schema \u00b6 Data Schema refers to the organization of key objects and entities, and their relationships. Data schemas are independent of the database implementation. CRIPT's data schema was designed to link together polymer materials, the processes that produced them, and the associated data that characterize them in a graph. This enables the comprehensive store of all aspects of polymer data and a descriptive visualization. There are four key objects (or nodes): Material, Process, Sample, Data. These nodes were designed to represent the fundamental objects of polymer material research. Additionally, a Model object is part of the data schema which provides a means to transform data. Data Model \u00b6 Data Model refers to a specific implementation of a data schema into a database. A data model includes additional consideration with regard to app design, hardware use, and additional features. CRIPT's data model is an explict embodiment of the data schema for a document based database, specifically Mongodb . The current data model is structured as a directed acyclic graph (DAG). Version Control \u00b6 Version control is a system that records changes to a file or data entry over time so that you can recall specific versions later. The CRIPT database implements data version control as it provides a complete long-term change history of every file. This benefits science by increasing data transparency and minimizes the re-analysis or processing of data.","title":"Overview"},{"location":"data-models/#overview","text":"As part of CRIPT's mission to develop a digital ecosystem for polymers, there was a need to generate a standard data model and schema to share polymer data. The following documentation details the way in which polymer data is represented and stored and within the CRIPT ecosystem.","title":"Overview"},{"location":"data-models/#importance","text":"Having accessible well-structured data is the foundation of cheminformatics. The complexity of polymer structures with the wide range of characterization techniques and properties poses significant challenges in the formation of databases. This has led to several small, disparate data sets. The data structure presented here provides a universal system to capture all relevant polymer data in a manner optimized for large databases. It is designed to allow anyone to contribute for the benefit of the polymer community; with to goal to ultimately accelerating the pace of material innovation. Value Proposition: Archiving system Eliminate the loss of data Saves money and time on replicating experiments Promotes good data recording practices Uniform structure Reduce time spent searching for data Increases completeness of data entered Effortless data sharing Gain access to large well structure data Enables machine learning and large data analytics","title":"Importance"},{"location":"data-models/#philosophy","text":"","title":"Philosophy"},{"location":"data-models/#reporting-guidelines","text":"Reporting guidelines refers to what information is required to be captured about an experiment. CRIPT has been designed with minimal reporting requirements as polymer data is highly variable in content and completeness. However, contributors of data are encouraged to provide as much data as possible as it ensures the polymer data has sufficient information to contextualize the data. Additionally, the more information provided will aid in the discoverability of the data. More specific reporting guidance can be found in the following documents.","title":"Reporting Guidelines"},{"location":"data-models/#vocabulary","text":"Vocabulary (controlled) is the set of terminology that provides unique identification and definition of datum. CRIPT provide an expert curated vocabulary for polymer data. Contributors are highly encouraged to stick to the official vocabulary when possible, as it ensures data uniformity. Data uniformity is necessary for successful exchange information, search, and data retrieval. CRIPT recognizes that the current vocabulary may not cover all polymer data that contributors desire to add to the database, thus CRIPT accepts any user-defined vocabulary such that it begins with a + . Contributors can petition for the addition of new official vocabulary by emailing cript@mit.edu with the term, brief description, preferred units, and explanation of why it should be added to the official vocabulary.","title":"Vocabulary"},{"location":"data-models/#data-exchange-format","text":"Data exchange format is the specification of how data is encoded to be a computer-readable and -processable format. CRIPT structures data is formatted as a JSON files which are stored in MongoDB as BSON (a byte version of JSON). Thus, BSON data types are used.","title":"Data exchange format"},{"location":"data-models/#data-schema","text":"Data Schema refers to the organization of key objects and entities, and their relationships. Data schemas are independent of the database implementation. CRIPT's data schema was designed to link together polymer materials, the processes that produced them, and the associated data that characterize them in a graph. This enables the comprehensive store of all aspects of polymer data and a descriptive visualization. There are four key objects (or nodes): Material, Process, Sample, Data. These nodes were designed to represent the fundamental objects of polymer material research. Additionally, a Model object is part of the data schema which provides a means to transform data.","title":"Data Schema"},{"location":"data-models/#data-model","text":"Data Model refers to a specific implementation of a data schema into a database. A data model includes additional consideration with regard to app design, hardware use, and additional features. CRIPT's data model is an explict embodiment of the data schema for a document based database, specifically Mongodb . The current data model is structured as a directed acyclic graph (DAG).","title":"Data Model"},{"location":"data-models/Collections/","text":"Collections \u00b6 The 'collection' node also for the grouping of experiments. Features: collections within collections are allowed collection can reference experiments, collections required information name optional information experiments (CRIPT node) collection (CRIPT node) notes auto generate/update: _id class ver_sch ver_con (& all child) <-- update with version control node date (& all child) numb_expt App features to support this node: a page to fill out collection details a tool to look up experiments, or enter _id a similar look up tool for users, and groups allow additional optional information in attribute section given that it begins with + JSON Schema \u00b6 { \"_id\" : objec t Id() , \"class\" : \"coll\" , \"ver_sch\" : s tr i n g , \"ver_con\" : { \"_id\" : objec t Id() , \"num\" : s tr i n g }, \"date\" : [ { \"created\" : da tet ime }, { \"last_mod\" : da tet ime } ], \"name\" : s tr i n g , \"optional attributes\" } Description \u00b6 Key Data Type Required Description _id objectId() auto unique database id class string auto class of node ver_sch string auto schema version; Ex: \"v0.1\" ver_con version control object ver_con/_id objectId() auto reference id to node history ver_con/num string auto type of node ; Ex: \"group\" date datetime object date/created datetime auto datetime created type/last_mod datetime auto last modified datetime name string required name of collection Attributes \u00b6 Attributes are optional properties that can be associated with this node. The following list is the officially supported keys. Users may define their own keys by placing a '+' in front of their custom key. Key Data Type Description num_expt int number of experiments in collection expt list[dict] experiment nodes expt/_id objectId() id for experiment expt/name string name for experiment expt/prod string main product of experiment coll list[dict] collection nodes coll\\_id objectId() id of collection coll\\name string name of collection coll\\date datetime date collection created note string free-form space to store any text Example \u00b6 { \"_id\" : \"507f191e810c19729de861ec\" , \"type\" : \"coll\" , \"ver_sch\" : \"v0.1\" , \"ver_con\" : { \"_id\" : \"507f191e810c19729de861cb\" , \"num\" : \"v2.1\" }, \"date\" : [ { \"created\" : 1612881183 }, { \"last_mod\" : 1612881123 } ], \"notes\" : \"\" , \"users\" : [ { \"_id\" : \"507f191e810c19729de860ec\" , \"name\" : \"Dylan W\" , \"perm\" : \"w\" } ], \"name\" : \"ROMP Kinetics\" , \"num_expt\" : 3 , \"expt\" : [ { \"_id\" : \"507f191e810c19729de860em\" , \"name\" : \"ROMP monomer order kinetic study\" , \"date\" : 1612886423 }, { \"_id\" : \"507f191e810c19729de860en\" , \"name\" : \"ROMP pyridine order kinetic study\" , \"date\" : 1612886423 }, { \"_id\" : \"507f191e810c19729de860ej\" , \"name\" : \"ROMP catalyst kinetic study\" , \"date\" : 1612886423 } ], \"attr\" : { \"users\" : [ { \"_id\" : \"507f191e810c19729de860ec\" , \"name\" : \"Dylan W\" } ], \"group\" : [ { \"_id\" : \"507f191e810c19729de860em\" , \"name\" : \"UIUC\" } ] } }","title":"Collections"},{"location":"data-models/Collections/#collections","text":"The 'collection' node also for the grouping of experiments. Features: collections within collections are allowed collection can reference experiments, collections required information name optional information experiments (CRIPT node) collection (CRIPT node) notes auto generate/update: _id class ver_sch ver_con (& all child) <-- update with version control node date (& all child) numb_expt App features to support this node: a page to fill out collection details a tool to look up experiments, or enter _id a similar look up tool for users, and groups allow additional optional information in attribute section given that it begins with +","title":"Collections"},{"location":"data-models/Collections/#json-schema","text":"{ \"_id\" : objec t Id() , \"class\" : \"coll\" , \"ver_sch\" : s tr i n g , \"ver_con\" : { \"_id\" : objec t Id() , \"num\" : s tr i n g }, \"date\" : [ { \"created\" : da tet ime }, { \"last_mod\" : da tet ime } ], \"name\" : s tr i n g , \"optional attributes\" }","title":"JSON Schema"},{"location":"data-models/Collections/#description","text":"Key Data Type Required Description _id objectId() auto unique database id class string auto class of node ver_sch string auto schema version; Ex: \"v0.1\" ver_con version control object ver_con/_id objectId() auto reference id to node history ver_con/num string auto type of node ; Ex: \"group\" date datetime object date/created datetime auto datetime created type/last_mod datetime auto last modified datetime name string required name of collection","title":"Description"},{"location":"data-models/Collections/#attributes","text":"Attributes are optional properties that can be associated with this node. The following list is the officially supported keys. Users may define their own keys by placing a '+' in front of their custom key. Key Data Type Description num_expt int number of experiments in collection expt list[dict] experiment nodes expt/_id objectId() id for experiment expt/name string name for experiment expt/prod string main product of experiment coll list[dict] collection nodes coll\\_id objectId() id of collection coll\\name string name of collection coll\\date datetime date collection created note string free-form space to store any text","title":"Attributes"},{"location":"data-models/Collections/#example","text":"{ \"_id\" : \"507f191e810c19729de861ec\" , \"type\" : \"coll\" , \"ver_sch\" : \"v0.1\" , \"ver_con\" : { \"_id\" : \"507f191e810c19729de861cb\" , \"num\" : \"v2.1\" }, \"date\" : [ { \"created\" : 1612881183 }, { \"last_mod\" : 1612881123 } ], \"notes\" : \"\" , \"users\" : [ { \"_id\" : \"507f191e810c19729de860ec\" , \"name\" : \"Dylan W\" , \"perm\" : \"w\" } ], \"name\" : \"ROMP Kinetics\" , \"num_expt\" : 3 , \"expt\" : [ { \"_id\" : \"507f191e810c19729de860em\" , \"name\" : \"ROMP monomer order kinetic study\" , \"date\" : 1612886423 }, { \"_id\" : \"507f191e810c19729de860en\" , \"name\" : \"ROMP pyridine order kinetic study\" , \"date\" : 1612886423 }, { \"_id\" : \"507f191e810c19729de860ej\" , \"name\" : \"ROMP catalyst kinetic study\" , \"date\" : 1612886423 } ], \"attr\" : { \"users\" : [ { \"_id\" : \"507f191e810c19729de860ec\" , \"name\" : \"Dylan W\" } ], \"group\" : [ { \"_id\" : \"507f191e810c19729de860em\" , \"name\" : \"UIUC\" } ] } }","title":"Example"},{"location":"data-models/Data/","text":"Data \u00b6 The 'data' node contains data related to raw or processed data. This can be an NMR fid, SEC trace, molecular weight distribution, or stress-strain curve. Features: data nodes points only to raw data files required information name type source optional information file file type sample preparation instrument details calibration data history note auto generate/update: _id class ver_sch ver_con (& all child) <-- update with version control node date (& all child) App features to support this node: a page to plot, analyze data (csv or data ) allow additional optional information in attribute section given that it begins with + units are not stored and all official values are converted to database standard prior to storage JSON Schema \u00b6 { \"_id\" : objec t Id() , \"class\" : \"data\" , \"ver_sch\" : s tr i n g , \"ver_con\" : { \"_id\" : objec t Id() , \"num\" : s tr i n g }, \"date\" : [ { \"created\" : da tet ime }, { \"last_mod\" : da tet ime } ], \"name\" : s tr i n g , \"type\" : s tr i n g , \"source\" : s tr i n g , \"optional attributes\" } Description \u00b6 Key Data Type Required Description _id objectId() auto unique database id class string auto class of node ver_sch string auto schema version; Ex: \"v0.1\" ver_con version control object ver_con/_id objectId() auto reference id to node history ver_con/num string auto type of node ; Ex: \"group\" date datetime object date/created datetime auto datetime created type/last_mod datetime auto last modified datetime name string required name of data type string required type of data, see options below source string required source of data [expt, proc, comp] experiment, processed data, computed data Attributes \u00b6 Attributes are optional properties that can be associated with this node. The following list is the officially supported keys. Users may define their own keys by placing a '+' in front of their custom key. Data can either be linked through file or placed directly in the document with data . data is restricted to #### total data points. total data points = row * col Key Data Type Description file list[dict] link to raw file file/_id objectId() id for file file/type string file type (ex. csv, txt, xlsm) file/dis string description web_link string raw data may be store on another website and can be linked here s_prep string description of sample preparation equip list[dict] equipment or instrument details/configuration equip/_id objectId() id for file equip/type string file type (ex. csv, txt, xlsm) equip/dis string description cal list[dict] calibration details cal/_id objectId() id for file cal/type string file type (ex. csv, txt, xlsm) cal/dis string description data dict data information data/col_head list labels for columns (order should match data) data/row_head list labels for rows (order should match data) data/col_unit list units for columns (order should match data) data/row_unit list units for rows (order should match data) histroy dict data history (feature under construction) note string free-form space to store any text Type \u00b6 1D data \u00b6 type x-axis x-axis unit y-axis y-axis unit Description rxn_conv time min conversion reaction conversion vs time mn_conv conversion m_n g/mol M_n vs monomer conversion mwd molecular weight g/mol population mol frac molecular weight distribution (by mole) mwd_wt molecular weight g/mol population wt frac molecular weight distribution (by weight) sec_trace retention time min signal SEC trace (by retention time) sec_trace_vol elution vol. ml signal SEC trace (by elution volume) nmr time us voltage V Free induction decay nmr_h1 chemical shift ppm signal proton NMR (H1 NMR) nmr_c13 chemical shift ppm signal carbon NMR (C13 NMR) nmr_n15 chemical shift ppm signal nitrogen NMR (N15 NMR) nmr_o17 chemical shift ppm signal oxygen NMR (O17 NMR) nmr_f19 chemical shift ppm signal fluorine NMR (F19 NMR) nmr_si29 chemical shift ppm signal silicon NMR (Si29 NMR) nmr_p31 chemical shift ppm signal phosphorous NMR (P31 NMR) nmr_noe chemical shift ppm signal nuclear Overhauser effect NMR nmr_tocsy chemical shift ppm signal total correlation spectroscopy NMR ir wavenumber cm**-1 signal infrared spectroscopy stess_st stess kPa strain stress strain curve waxs q angstrom**-1 intensity wide angle light scattering saxs q angstrom**-1 intensity small angle light scattering g_prime frequency rad/s stress Pa storage modulus g_doub_prime frequency rad/s stress Pa loss modulus 2D data \u00b6 type x-axis x-axis unit y-axis y-axis unit Description nmr_cosy chemical shift ppm chemical shift ppm correlation spectroscopy NMR (H - H) nmr_hsqc chemical shift ppm chemical shift ppm heteronuclear single-quantum correlation spectroscopy NMR (H - C) nmr_hmbc chemical shift ppm chemical shift ppm heteronuclear multiple-bond correlation spectroscopy NMR (H - C) nmr_dosy chemical shift ppm diffusion coeff. m**2/s Diffusion NMR waxs_i distance nm**-1 distance nm**-1 wide angle light scattering image saxs_i distance nm**-1 distance nm**-1 small angle light scattering image n-D data \u00b6 type x-axis x-axis unit y-axis y-axis unit Description Data history \u00b6 Under construction Example \u00b6 { \"_id\" : \"507f191e810c19729de860ec\" , \"type\" : \"data\" , \"ver_sch\" : \"v0.1\" , \"ver_con\" : { \"_id\" : \"507f191e810c19729de860cb\" , \"num\" : \"v0.1\" }, \"date\" : [ { \"created\" : 1612889183 }, { \"last_mod\" : 1612889123 } ], \"notes\" : \"\" , \"users\" : [ { \"_id\" : \"507f191e810c19729de860ec\" , \"name\" : \"Dylan W\" , \"perm\" : \"w\" } ], \"name\" : \"sec\" , \"source\" : \"expt\" , \"expt\" : [ { \"_id\" : \"507f191e810c19729de860em\" , \"name\" : \"Anionic polymerization\" , \"date\" : 1612886423 } ], \"mat\" : [ { \"_id\" : \"507f191e810c19729de860ed\" , \"name\" : \"poly(styrene)\" , \"prop\" : \"m_n\" , \"value\" : 5300 }, { \"_id\" : \"507f191e810c19729de860ed\" , \"name\" : \"poly(styrene)\" , \"prop\" : \"d\" , \"value\" : 1.03 } ], \"attr\" : { \"file\" : \"507f191e810c19729de860ed\" , \"file_type\" : \"csv\" } }","title":"Data"},{"location":"data-models/Data/#data","text":"The 'data' node contains data related to raw or processed data. This can be an NMR fid, SEC trace, molecular weight distribution, or stress-strain curve. Features: data nodes points only to raw data files required information name type source optional information file file type sample preparation instrument details calibration data history note auto generate/update: _id class ver_sch ver_con (& all child) <-- update with version control node date (& all child) App features to support this node: a page to plot, analyze data (csv or data ) allow additional optional information in attribute section given that it begins with + units are not stored and all official values are converted to database standard prior to storage","title":"Data"},{"location":"data-models/Data/#json-schema","text":"{ \"_id\" : objec t Id() , \"class\" : \"data\" , \"ver_sch\" : s tr i n g , \"ver_con\" : { \"_id\" : objec t Id() , \"num\" : s tr i n g }, \"date\" : [ { \"created\" : da tet ime }, { \"last_mod\" : da tet ime } ], \"name\" : s tr i n g , \"type\" : s tr i n g , \"source\" : s tr i n g , \"optional attributes\" }","title":"JSON Schema"},{"location":"data-models/Data/#description","text":"Key Data Type Required Description _id objectId() auto unique database id class string auto class of node ver_sch string auto schema version; Ex: \"v0.1\" ver_con version control object ver_con/_id objectId() auto reference id to node history ver_con/num string auto type of node ; Ex: \"group\" date datetime object date/created datetime auto datetime created type/last_mod datetime auto last modified datetime name string required name of data type string required type of data, see options below source string required source of data [expt, proc, comp] experiment, processed data, computed data","title":"Description"},{"location":"data-models/Data/#attributes","text":"Attributes are optional properties that can be associated with this node. The following list is the officially supported keys. Users may define their own keys by placing a '+' in front of their custom key. Data can either be linked through file or placed directly in the document with data . data is restricted to #### total data points. total data points = row * col Key Data Type Description file list[dict] link to raw file file/_id objectId() id for file file/type string file type (ex. csv, txt, xlsm) file/dis string description web_link string raw data may be store on another website and can be linked here s_prep string description of sample preparation equip list[dict] equipment or instrument details/configuration equip/_id objectId() id for file equip/type string file type (ex. csv, txt, xlsm) equip/dis string description cal list[dict] calibration details cal/_id objectId() id for file cal/type string file type (ex. csv, txt, xlsm) cal/dis string description data dict data information data/col_head list labels for columns (order should match data) data/row_head list labels for rows (order should match data) data/col_unit list units for columns (order should match data) data/row_unit list units for rows (order should match data) histroy dict data history (feature under construction) note string free-form space to store any text","title":"Attributes"},{"location":"data-models/Data/#type","text":"","title":"Type"},{"location":"data-models/Data/#data-history","text":"Under construction","title":"Data history"},{"location":"data-models/Data/#example","text":"{ \"_id\" : \"507f191e810c19729de860ec\" , \"type\" : \"data\" , \"ver_sch\" : \"v0.1\" , \"ver_con\" : { \"_id\" : \"507f191e810c19729de860cb\" , \"num\" : \"v0.1\" }, \"date\" : [ { \"created\" : 1612889183 }, { \"last_mod\" : 1612889123 } ], \"notes\" : \"\" , \"users\" : [ { \"_id\" : \"507f191e810c19729de860ec\" , \"name\" : \"Dylan W\" , \"perm\" : \"w\" } ], \"name\" : \"sec\" , \"source\" : \"expt\" , \"expt\" : [ { \"_id\" : \"507f191e810c19729de860em\" , \"name\" : \"Anionic polymerization\" , \"date\" : 1612886423 } ], \"mat\" : [ { \"_id\" : \"507f191e810c19729de860ed\" , \"name\" : \"poly(styrene)\" , \"prop\" : \"m_n\" , \"value\" : 5300 }, { \"_id\" : \"507f191e810c19729de860ed\" , \"name\" : \"poly(styrene)\" , \"prop\" : \"d\" , \"value\" : 1.03 } ], \"attr\" : { \"file\" : \"507f191e810c19729de860ed\" , \"file_type\" : \"csv\" } }","title":"Example"},{"location":"data-models/Data_Entry/","text":"How does it work? \u00b6 Data Schema \u00b6 The data schema consists of 4 main nodes: Material: contains identity and property data for a chemical Process: contains ingredient list, quantities, and procedure information Sample: contains procedure and property information Data: contains data related to raw or processed data These 4 nodes contain all the relevant polymer information. The fifth node 'models' contains functions which transform raw data to processed data or properties. To show how the data schema can be implemented, we will go through the anionic synthesis of a polystyrene, polybutadiene block copolymer through sequential addition of monomers. We will describe the implementation from the perspective of the real world experiment timeline as that is likely to be the most intuitive workflow. The data schema begins with the definition of material nodes. These first material nodes are the ingredients for the process node. This will be secbuLi, styrene, and toluene in our example. These materials nodes will contain information such as name, SMILES string, CAS number, and property information (molecular weight, boiling point, etc.) The second node to be defined will be a process node. In this case, it will be a polymerization node. The polymerization node will contain links to those initial material nodes as well as the quantities of each material used in the polymerization. The polymerization node will also contain details for the process in the form of a paragraph, or a list of process parameters. For the anionic polymerization, this can be details about the order of addition of the chemicals, reaction time, temperature, etc. In the case when data is taken about a process, a link to data node can be made. Something like polymerization kinetics where concentration or MW is monitored over time. The third node to be defined is another material node, or product of the process. Polystyrene in this case. The process node will link to this product material node. Any characterization data from aliquots can be added through a data node. The material node will link to the relevant data nodes. In our example, SEC raw data or NMR spectra can be found in the data nodes, while the calculated values like Mn, Mw, Mw/Mn, etc. would be found in the property section of the polystyrene node. The synthesis for the second block, polybutadiene, continues with the definition of the butadiene material node. This can be followed by the definition of a second polymerization node which will point to the product of the whole process, polystyrene-polybutadiene block copolymer. Similar to the polystyrene characterization, the SEC and NMR data can be placed into data nodes. With this final target material made additional material studies, like tensile testing or oxygen barrier properties, may be done. In this case, there may be some material preparation steps such as hot pressing the sample into a dog bone. This can be placed into a sample node. This sample node contains the material preparation steps and any characterization data that occurred on the sample. We can also visualize the exact same example in the context of a direct acyclic graph. Data Model \u00b6 The data model provides a specific implementation of the data schema, and additional features. In particular, it adds several organizational nodes: User: contains information about an individual using the database Group: contains information about group and ownership of collections and experiments lies with groups Publication: contains a collections which embodies a literature publication Collection: are groups of experiments or other collections Experiment: are a set of Process, Material, Sample, Data nodes It also adds to locations to handle data and models: Data Lake: location of all raw data files Model Lake: collection of data transformation and analysis tools A new user joining the CRIPT ecosystem will result in the creation of a new user node. The user can then either create a new group or join an existing group. If a new group is formed then a new collection will be made in which the first experiment can be placed into. If a user is joining an existing group, the user will have access to all collections and embedded experiments the group has ownership of. Collections can be turned into publications which removes all write capabilities for any embedded document.","title":"How does it work"},{"location":"data-models/Data_Entry/#how-does-it-work","text":"","title":"How does it work?"},{"location":"data-models/Data_Entry/#data-schema","text":"The data schema consists of 4 main nodes: Material: contains identity and property data for a chemical Process: contains ingredient list, quantities, and procedure information Sample: contains procedure and property information Data: contains data related to raw or processed data These 4 nodes contain all the relevant polymer information. The fifth node 'models' contains functions which transform raw data to processed data or properties. To show how the data schema can be implemented, we will go through the anionic synthesis of a polystyrene, polybutadiene block copolymer through sequential addition of monomers. We will describe the implementation from the perspective of the real world experiment timeline as that is likely to be the most intuitive workflow. The data schema begins with the definition of material nodes. These first material nodes are the ingredients for the process node. This will be secbuLi, styrene, and toluene in our example. These materials nodes will contain information such as name, SMILES string, CAS number, and property information (molecular weight, boiling point, etc.) The second node to be defined will be a process node. In this case, it will be a polymerization node. The polymerization node will contain links to those initial material nodes as well as the quantities of each material used in the polymerization. The polymerization node will also contain details for the process in the form of a paragraph, or a list of process parameters. For the anionic polymerization, this can be details about the order of addition of the chemicals, reaction time, temperature, etc. In the case when data is taken about a process, a link to data node can be made. Something like polymerization kinetics where concentration or MW is monitored over time. The third node to be defined is another material node, or product of the process. Polystyrene in this case. The process node will link to this product material node. Any characterization data from aliquots can be added through a data node. The material node will link to the relevant data nodes. In our example, SEC raw data or NMR spectra can be found in the data nodes, while the calculated values like Mn, Mw, Mw/Mn, etc. would be found in the property section of the polystyrene node. The synthesis for the second block, polybutadiene, continues with the definition of the butadiene material node. This can be followed by the definition of a second polymerization node which will point to the product of the whole process, polystyrene-polybutadiene block copolymer. Similar to the polystyrene characterization, the SEC and NMR data can be placed into data nodes. With this final target material made additional material studies, like tensile testing or oxygen barrier properties, may be done. In this case, there may be some material preparation steps such as hot pressing the sample into a dog bone. This can be placed into a sample node. This sample node contains the material preparation steps and any characterization data that occurred on the sample. We can also visualize the exact same example in the context of a direct acyclic graph.","title":"Data Schema"},{"location":"data-models/Data_Entry/#data-model","text":"The data model provides a specific implementation of the data schema, and additional features. In particular, it adds several organizational nodes: User: contains information about an individual using the database Group: contains information about group and ownership of collections and experiments lies with groups Publication: contains a collections which embodies a literature publication Collection: are groups of experiments or other collections Experiment: are a set of Process, Material, Sample, Data nodes It also adds to locations to handle data and models: Data Lake: location of all raw data files Model Lake: collection of data transformation and analysis tools A new user joining the CRIPT ecosystem will result in the creation of a new user node. The user can then either create a new group or join an existing group. If a new group is formed then a new collection will be made in which the first experiment can be placed into. If a user is joining an existing group, the user will have access to all collections and embedded experiments the group has ownership of. Collections can be turned into publications which removes all write capabilities for any embedded document.","title":"Data Model"},{"location":"data-models/Experiments/","text":"Experiment \u00b6 The 'experiment' node contains complete set of references nodes for an experiment. An experiment can range from a synthesis, to scattering experiment, or a simulation. A single experiment is meant to capture a single, or a linear set of processes. For non-linear processes (like running multiple reactions for optimizations, kinetics, etc.) collections are preferred. Features: experiment can reference materials, process, sample, data required information name materials, process, sample, data nodes optional information references notes auto generate/update: _id class ver_sch ver_con (& all child) <-- update with version control node date (& all child) App features to support this node: a page to fill out: experiment(materials, process, sample, data) data allow additional optional information in attribute section given that it begins with + JSON Schema \u00b6 { \"_id\" : objec t Id() , \"class\" : \"expt\" , \"ver_sch\" : s tr i n g , \"ver_con\" : { \"_id\" : objec t Id() , \"num\" : s tr i n g }, \"date\" : [ { \"created\" : da tet ime }, { \"last_mod\" : da tet ime } ], \"name\" : s tr i n g , \"nodes\" : { \"materials\" : [ { \"_id\" : objec t id() , \"name\" : s tr i n g , \"role\" : s tr i n g } ], \"process\" : [ { \"_id\" : objec t id() , \"name\" : s tr i n g } ], \"sample\" : [ { \"_id\" : objec t id() , \"name\" : s tr i n g , \"id_link\" : objec t id() } ], \"data\" : [ { \"_id\" : objec t id() , \"name\" : s tr i n g , \"id_link\" : objec t id() } ] }, \"optional attributes\" } Description \u00b6 Key Data Type Required Description _id objectId() auto unique database id class string auto class of node ver_sch string auto schema version; Ex: \"v0.1\" ver_con version control object ver_con/_id objectId() auto reference id to node history ver_con/num string auto type of node ; Ex: \"group\" date datetime object date/created datetime auto datetime created type/last_mod datetime auto last modified datetime name string required name of experiment nodes dict list of nodes that constitute an experiment nodes/materials list[dict] material nodes nodes/materials/_id objectId() auto id of material nodes/materials/name string auto name of material nodes/materials/role string auto material role [ingr, prod] nodes/process list[dict] process nodes nodes/process/_id objectId() auto id of process nodes/process/name string auto name of process nodes/sample list[dict] sample nodes nodes/sample/_id objectId() auto id of sample nodes/sample/name string auto name of sample nodes/sample/id_link objectId() auto id of the material the sample points nodes/data list[dict] data nodes nodes/data/_id objectId() auto id of data nodes/data/name string auto name of data nodes/data/id_link objectId() auto id of the node the data points Attributes \u00b6 Attributes are optional properties that can be associated with this node. The following list is the officially supported keys. Users may define their own keys by placing a '+' in front of their custom key. Key Data Type Description ref list[dict] reference for this experiment ref\\doi string DOI: digital object identifier ref\\title string reference title note string free-form space to store any text Example \u00b6 { \"_id\" : \"607f191e810c19729de860ea\" , \"type\" : \"expt\" , \"ver_sch\" : \"v0.1\" , \"ver_con\" : { \"_id\" : \"607f191e810c19729de860eb\" , \"num\" : \"v0.1\" }, \"date\" : [ { \"created\" : 1612889382 }, { \"last_mod\" : 1612889322 } ], \"notes\" : \"CRIPT development team is funded by NSF Convergence Accelerator.\" , \"users\" : [ { \"_id\" : \"507f191e810c19729de860ec\" , \"name\" : \"Dylan W\" , \"perm\" : \"w\" } ], \"name\" : \"ROMP kinetic study\" , \"nodes\" : { \"materials\" : [ { \"_id\" : \"507f191e810c19729de860ec\" , \"name\" : \"G3 Catalyst\" , \"_idproc\" : \"507f191e810c19729de860pe\" , \"role\" : \"ingr\" }, { \"_id\" : \"507f191e810c19729de860ed\" , \"name\" : \"dichloromethane\" , \"_idproc\" : \"507f191e810c19729de860pe\" , \"role\" : \"ingr\" }, { \"_id\" : \"507f191e810c19729de860ee\" , \"name\" : \"norbornene-imide\" , \"_idproc\" : \"507f191e810c19729de860pe\" , \"role\" : \"ingr\" }, { \"_id\" : \"507f191e810c19729de860ef\" , \"name\" : \"ethyl vinyl ether\" , \"_idproc\" : \"507f191e810c19729de860pe\" , \"role\" : \"ingr\" }, { \"_id\" : \"507f191e810c19729de860ds\" , \"name\" : \"poly(norborene-imide)\" , \"_idproc\" : \"507f191e810c19729de860pe\" , \"role\" : \"prod\" } ], \"process\" : [ { \"_id\" : \"507f191e810c19729de860pe\" , \"name\" : \"ROMP polymerization\" , \"_idout\" : \"507f191e810c19729de860ds\" } ], \"data\" : [ { \"_id\" : \"507f191e810c19729de860md\" , \"name\" : \"1H NMR\" , \"_idprod\" : \"507f191e810c19729de860ds\" , \"_idprod\" : \"507f191e810c19729de860ds\" }, { \"_id\" : \"507f191e810c19729de860me\" , \"name\" : \"SEC\" , \"_idprod\" : \"507f191e810c19729de860ds\" , \"_idprod\" : \"507f191e810c19729de860ds\" } ] }, \"attr\" : { \"pub\" : [ { \"_id\" : \"507f191e810c19729de860em\" , \"title\" : \"Kinetic Study of Living Ring-Opening Metathesis Polymerization\" } ], \"ref\" : [ { \"_id\" : \"507f191e810c19729de860en\" , \"title\" : \"Kinetic Study of Anionic Living Polymerization\" } ] } } Visualization \u00b6 The reaction network can be generated out of node .","title":"Experiments"},{"location":"data-models/Experiments/#experiment","text":"The 'experiment' node contains complete set of references nodes for an experiment. An experiment can range from a synthesis, to scattering experiment, or a simulation. A single experiment is meant to capture a single, or a linear set of processes. For non-linear processes (like running multiple reactions for optimizations, kinetics, etc.) collections are preferred. Features: experiment can reference materials, process, sample, data required information name materials, process, sample, data nodes optional information references notes auto generate/update: _id class ver_sch ver_con (& all child) <-- update with version control node date (& all child) App features to support this node: a page to fill out: experiment(materials, process, sample, data) data allow additional optional information in attribute section given that it begins with +","title":"Experiment"},{"location":"data-models/Experiments/#json-schema","text":"{ \"_id\" : objec t Id() , \"class\" : \"expt\" , \"ver_sch\" : s tr i n g , \"ver_con\" : { \"_id\" : objec t Id() , \"num\" : s tr i n g }, \"date\" : [ { \"created\" : da tet ime }, { \"last_mod\" : da tet ime } ], \"name\" : s tr i n g , \"nodes\" : { \"materials\" : [ { \"_id\" : objec t id() , \"name\" : s tr i n g , \"role\" : s tr i n g } ], \"process\" : [ { \"_id\" : objec t id() , \"name\" : s tr i n g } ], \"sample\" : [ { \"_id\" : objec t id() , \"name\" : s tr i n g , \"id_link\" : objec t id() } ], \"data\" : [ { \"_id\" : objec t id() , \"name\" : s tr i n g , \"id_link\" : objec t id() } ] }, \"optional attributes\" }","title":"JSON Schema"},{"location":"data-models/Experiments/#description","text":"Key Data Type Required Description _id objectId() auto unique database id class string auto class of node ver_sch string auto schema version; Ex: \"v0.1\" ver_con version control object ver_con/_id objectId() auto reference id to node history ver_con/num string auto type of node ; Ex: \"group\" date datetime object date/created datetime auto datetime created type/last_mod datetime auto last modified datetime name string required name of experiment nodes dict list of nodes that constitute an experiment nodes/materials list[dict] material nodes nodes/materials/_id objectId() auto id of material nodes/materials/name string auto name of material nodes/materials/role string auto material role [ingr, prod] nodes/process list[dict] process nodes nodes/process/_id objectId() auto id of process nodes/process/name string auto name of process nodes/sample list[dict] sample nodes nodes/sample/_id objectId() auto id of sample nodes/sample/name string auto name of sample nodes/sample/id_link objectId() auto id of the material the sample points nodes/data list[dict] data nodes nodes/data/_id objectId() auto id of data nodes/data/name string auto name of data nodes/data/id_link objectId() auto id of the node the data points","title":"Description"},{"location":"data-models/Experiments/#attributes","text":"Attributes are optional properties that can be associated with this node. The following list is the officially supported keys. Users may define their own keys by placing a '+' in front of their custom key. Key Data Type Description ref list[dict] reference for this experiment ref\\doi string DOI: digital object identifier ref\\title string reference title note string free-form space to store any text","title":"Attributes"},{"location":"data-models/Experiments/#example","text":"{ \"_id\" : \"607f191e810c19729de860ea\" , \"type\" : \"expt\" , \"ver_sch\" : \"v0.1\" , \"ver_con\" : { \"_id\" : \"607f191e810c19729de860eb\" , \"num\" : \"v0.1\" }, \"date\" : [ { \"created\" : 1612889382 }, { \"last_mod\" : 1612889322 } ], \"notes\" : \"CRIPT development team is funded by NSF Convergence Accelerator.\" , \"users\" : [ { \"_id\" : \"507f191e810c19729de860ec\" , \"name\" : \"Dylan W\" , \"perm\" : \"w\" } ], \"name\" : \"ROMP kinetic study\" , \"nodes\" : { \"materials\" : [ { \"_id\" : \"507f191e810c19729de860ec\" , \"name\" : \"G3 Catalyst\" , \"_idproc\" : \"507f191e810c19729de860pe\" , \"role\" : \"ingr\" }, { \"_id\" : \"507f191e810c19729de860ed\" , \"name\" : \"dichloromethane\" , \"_idproc\" : \"507f191e810c19729de860pe\" , \"role\" : \"ingr\" }, { \"_id\" : \"507f191e810c19729de860ee\" , \"name\" : \"norbornene-imide\" , \"_idproc\" : \"507f191e810c19729de860pe\" , \"role\" : \"ingr\" }, { \"_id\" : \"507f191e810c19729de860ef\" , \"name\" : \"ethyl vinyl ether\" , \"_idproc\" : \"507f191e810c19729de860pe\" , \"role\" : \"ingr\" }, { \"_id\" : \"507f191e810c19729de860ds\" , \"name\" : \"poly(norborene-imide)\" , \"_idproc\" : \"507f191e810c19729de860pe\" , \"role\" : \"prod\" } ], \"process\" : [ { \"_id\" : \"507f191e810c19729de860pe\" , \"name\" : \"ROMP polymerization\" , \"_idout\" : \"507f191e810c19729de860ds\" } ], \"data\" : [ { \"_id\" : \"507f191e810c19729de860md\" , \"name\" : \"1H NMR\" , \"_idprod\" : \"507f191e810c19729de860ds\" , \"_idprod\" : \"507f191e810c19729de860ds\" }, { \"_id\" : \"507f191e810c19729de860me\" , \"name\" : \"SEC\" , \"_idprod\" : \"507f191e810c19729de860ds\" , \"_idprod\" : \"507f191e810c19729de860ds\" } ] }, \"attr\" : { \"pub\" : [ { \"_id\" : \"507f191e810c19729de860em\" , \"title\" : \"Kinetic Study of Living Ring-Opening Metathesis Polymerization\" } ], \"ref\" : [ { \"_id\" : \"507f191e810c19729de860en\" , \"title\" : \"Kinetic Study of Anionic Living Polymerization\" } ] } }","title":"Example"},{"location":"data-models/Experiments/#visualization","text":"The reaction network can be generated out of node .","title":"Visualization"},{"location":"data-models/Groups/","text":"Groups \u00b6 The 'group' node contains data related to a group which is a collection of users. Example of groups are MIT, Citrine, CRIPT development team, or a research group. They can be big organizations or small groups of only two users. Features: groups within groups are allowed groups can reference groups, collections, publications required information name optional information collection list (CRIPT node) child group (CRIPT node) Publication (CRIPT node) website email notes auto generate/update: _id class ver_sch ver_con (& all child) <-- update with version control node date (& all child) App features to support this node: a page to fill out: name, website, email, etc. a tool to look up tool for groups, and publications allow additional optional information in attribute section given that it begins with + JSON Schema \u00b6 { \"_id\" : objec t Id() , \"class\" : \"group\" , \"ver_sch\" : s tr i n g , \"ver_con\" : { \"_id\" : objec t Id() , \"num\" : s tr i n g }, \"date\" : [ { \"created\" : da tet ime }, { \"last_mod\" : da tet ime } ], \"name\" : s tr i n g , \"coll\" : [ { \"_id\" : objec t Id() , \"name\" : s tr i n g } ], \"optional attributes\" } Description \u00b6 Key Data Type Required Description _id objectId() auto unique database id class string auto class of node ver_sch string auto schema version; Ex: \"v0.1\" ver_con version control object ver_con/_id objectId() auto reference id to node history ver_con/num string auto type of node ; Ex: \"group\" date datetime object date/created datetime auto datetime created type/last_mod datetime auto last modified datetime name string required name of group Attributes \u00b6 Attributes are optional properties that can be associated with this node. The following list is the officially supported keys. Users may define their own keys by placing a '+' in front of their custom key. Key Data Type Description coll list[dict] collection nodes coll\\_id objectId() id of collection coll\\name string name of collection coll\\date datetime date collection created chi_group list[dict] child group chi_group\\_id objectId() id of child group chi_group\\name string name of child group pub list[dict] publication node that this experiment was a part of pub\\_id objectId() id for publication pub\\title string publication title web string website of group email string group email address notes string free-form space to store any text Example \u00b6 { \"_id\" : \"507f191e810c19729de860ea\" , \"type\" : \"group\" , \"ver_sch\" : \"v0.1\" , \"ver_con\" : { \"_id\" : \"507f191e810c19729de860eb\" , \"num\" : \"v0.1\" }, \"date\" : [ { \"created\" : 1612889182 }, { \"last_mod\" : 1612889122 } ], \"notes\" : \"CRIPT development team is funded by NSF Convergence Accelerator.\" , \"name\" : \"CRIPT\" , \"owner\" : { \"_id\" : \"507f191e810c19729de860ec\" , \"name\" : \"Dylan W\" }, \"users_num\" : 5 , \"users_list\" : [ { \"_id\" : \"507f191e810c19729de860ec\" , \"name\" : \"Dylan W\" }, { \"_id\" : \"507f191e810c19729de860ed\" , \"name\" : \"Eric M\" }, { \"_id\" : \"507f191e810c19729de860ee\" , \"name\" : \"Chris B\" }, { \"_id\" : \"507f191e810c19729de860ef\" , \"name\" : \"Tzyy-Shyang L\" }, { \"_id\" : \"507f191e810c19729de860eg\" , \"name\" : \"Vinay H\" } ], \"attr\" : { \"par_group\" : [ { \"_id\" : \"507f191e810c19729de860em\" , \"name\" : \"MIT\" }, { \"_id\" : \"507f191e810c19729de860en\" , \"name\" : \"Citrine\" } ], \"pub\" : [ { \"_id\" : \"507f191e810c19729de860em\" , \"title\" : \"CRIPT database\" }, { \"_id\" : \"507f191e810c19729de860em\" , \"title\" : \"bigSMILES\" }, { \"_id\" : \"507f191e810c19729de860em\" , \"title\" : \"PolyDat\" } ], \"web\" : \"https://cript.mit.edu/\" , \"email\" : \"cript@mit.edu\" } }","title":"Groups"},{"location":"data-models/Groups/#groups","text":"The 'group' node contains data related to a group which is a collection of users. Example of groups are MIT, Citrine, CRIPT development team, or a research group. They can be big organizations or small groups of only two users. Features: groups within groups are allowed groups can reference groups, collections, publications required information name optional information collection list (CRIPT node) child group (CRIPT node) Publication (CRIPT node) website email notes auto generate/update: _id class ver_sch ver_con (& all child) <-- update with version control node date (& all child) App features to support this node: a page to fill out: name, website, email, etc. a tool to look up tool for groups, and publications allow additional optional information in attribute section given that it begins with +","title":"Groups"},{"location":"data-models/Groups/#json-schema","text":"{ \"_id\" : objec t Id() , \"class\" : \"group\" , \"ver_sch\" : s tr i n g , \"ver_con\" : { \"_id\" : objec t Id() , \"num\" : s tr i n g }, \"date\" : [ { \"created\" : da tet ime }, { \"last_mod\" : da tet ime } ], \"name\" : s tr i n g , \"coll\" : [ { \"_id\" : objec t Id() , \"name\" : s tr i n g } ], \"optional attributes\" }","title":"JSON Schema"},{"location":"data-models/Groups/#description","text":"Key Data Type Required Description _id objectId() auto unique database id class string auto class of node ver_sch string auto schema version; Ex: \"v0.1\" ver_con version control object ver_con/_id objectId() auto reference id to node history ver_con/num string auto type of node ; Ex: \"group\" date datetime object date/created datetime auto datetime created type/last_mod datetime auto last modified datetime name string required name of group","title":"Description"},{"location":"data-models/Groups/#attributes","text":"Attributes are optional properties that can be associated with this node. The following list is the officially supported keys. Users may define their own keys by placing a '+' in front of their custom key. Key Data Type Description coll list[dict] collection nodes coll\\_id objectId() id of collection coll\\name string name of collection coll\\date datetime date collection created chi_group list[dict] child group chi_group\\_id objectId() id of child group chi_group\\name string name of child group pub list[dict] publication node that this experiment was a part of pub\\_id objectId() id for publication pub\\title string publication title web string website of group email string group email address notes string free-form space to store any text","title":"Attributes"},{"location":"data-models/Groups/#example","text":"{ \"_id\" : \"507f191e810c19729de860ea\" , \"type\" : \"group\" , \"ver_sch\" : \"v0.1\" , \"ver_con\" : { \"_id\" : \"507f191e810c19729de860eb\" , \"num\" : \"v0.1\" }, \"date\" : [ { \"created\" : 1612889182 }, { \"last_mod\" : 1612889122 } ], \"notes\" : \"CRIPT development team is funded by NSF Convergence Accelerator.\" , \"name\" : \"CRIPT\" , \"owner\" : { \"_id\" : \"507f191e810c19729de860ec\" , \"name\" : \"Dylan W\" }, \"users_num\" : 5 , \"users_list\" : [ { \"_id\" : \"507f191e810c19729de860ec\" , \"name\" : \"Dylan W\" }, { \"_id\" : \"507f191e810c19729de860ed\" , \"name\" : \"Eric M\" }, { \"_id\" : \"507f191e810c19729de860ee\" , \"name\" : \"Chris B\" }, { \"_id\" : \"507f191e810c19729de860ef\" , \"name\" : \"Tzyy-Shyang L\" }, { \"_id\" : \"507f191e810c19729de860eg\" , \"name\" : \"Vinay H\" } ], \"attr\" : { \"par_group\" : [ { \"_id\" : \"507f191e810c19729de860em\" , \"name\" : \"MIT\" }, { \"_id\" : \"507f191e810c19729de860en\" , \"name\" : \"Citrine\" } ], \"pub\" : [ { \"_id\" : \"507f191e810c19729de860em\" , \"title\" : \"CRIPT database\" }, { \"_id\" : \"507f191e810c19729de860em\" , \"title\" : \"bigSMILES\" }, { \"_id\" : \"507f191e810c19729de860em\" , \"title\" : \"PolyDat\" } ], \"web\" : \"https://cript.mit.edu/\" , \"email\" : \"cript@mit.edu\" } }","title":"Example"},{"location":"data-models/Materials_O/","text":"Materials - other \u00b6 The 'material' node contains identity and property data for a chemical. This material node is specifically tailored for small molecules and inorganics. Features: material node points to data, and sample nodes required information name identity optional information data (CRIPT nodes) sample (CRIPT nodes) property keywords source lot_num storage conditions notes auto generate/update: _id class ver_sch ver_con (& all child) <-- update with version control node App features to support this node: allow additional optional information in iden , prop section given that it begins with + units are not stored for officially supported data as all official values are converted to database standard prior to storage JSON Schema \u00b6 { \"_id\" : objec t Id() , \"class\" : \"material_o\" , \"ver_sch\" : s tr i n g , \"ver_con\" : { \"_id\" : objec t Id() , \"num\" : s tr i n g }, \"date\" : [ { \"created\" : da tet ime }, { \"last_mod\" : da tet ime } ], \"name\" : s tr i n g , \"iden\" : { \"see identifiers\" : \"for details\" }, \"optional attributes\" } Description \u00b6 Key Data Type Required Description _id objectId() auto unique database id class string auto class of node ver_sch string auto schema version; Ex: \"v0.1\" ver_con version control object ver_con/_id objectId() auto reference id to node history ver_con/num string auto type of node ; Ex: \"group\" date datetime object date/created datetime auto datetime created type/last_mod datetime auto last modified datetime name string required name of chemical iden list[dict] required see identifiers section Attributes \u00b6 Attributes are optional properties that can be associated with this node. The following list is the officially supported keys. Users may define their own keys by placing a '+' in front of their custom key. Key Data Type Units Description sample list[dict] sample node sample/_id objectId() id of data sample/name string name of data data list[dict] data node data/_id objectId() id of data data/name string name of data data/type string type of data prop list[dict] see properties section keywords list[string] see keywords section below source string source of material lot_num string lot number store dict storage conditions store\\temp double degC storage temperature store\\time_num double min storage time store\\notes string notes related to storage note string free-form space to store any text Identifiers \u00b6 Identifiers are chemical descriptors or unique ids which speaks to the chemical structure. Providing as many identifiers as possible great facilitate the findability of the associated data. Additionally, if sufficiently many identifiers are provided, the polymer ensemble can be constructed from these values. Mixtures are supported in this section by appending to list of identifiers. [ { 'Key' : value , 'Key' : value } ] Primary Identifiers \u00b6 Key Data Type Required Description names list[string] required Any name for the material cas string optional CAS number smiles string optional simplified molecular-input line-entry system chem_form string optional chemical formula, Ex. benzene: \"C6H6\" Properties \u00b6 Properties consist of the following structure: { \"key\" : s tr i n g , \"method\" : s tr i n g , \"value\" : double , \"uncer\" : double , \"unit\" : s tr i n g , \"data\" : { \"_id\" : Objec t ID , \"name\" : s tr i n g , \"type\" : s tr i n g }, \"note\" : \"string\" } The range bound is limited to the largest number that can be stored in 64 bits (1.79e+308). Units are not stored for officially supported data as all official values are converted to database standard prior to storage Key Method Range Units Description ref_index [] [0, 1.79e+308] None a dimensionless number that describes how fast light travels through the material. density [] [0, 1.79e+308] None the amount of substance that fit within a unit of volume. mw ['nmr', 'ms'] [0, 1.79e+308] g/mol molecular weight conc [] [0, 1.79e+308] M concentration bp [] [-273.15, 1.79E308] degC boiling temperature mp [] [-273.15, 1.79E308] degC melting temperature vis ['viscometer'] [0, 1.79e+308] dl/g viscosity Attribute for Properties \u00b6 Key Data Type Description ref publication node that was a reference for this experiment ref\\_id objectId() id for reference ref\\title string reference title ref\\notes string for non-publication reference enter the information here data data data\\_id objectId() id for data node data\\key string key for data names list[string] additional names for property unit string unit are only applicable to user defined values Keywords \u00b6 Keywords are an optional field that allow users to classify the experiment. Selecting multiple keywords is allowed. monomer initiator catalyst solvent olefin styrene diene cyclic_olefin vinyl vinyl_ether vinyl_ester acrylate methylacrylate lactone cyclic_ether cyclic_carbonate cyclic_anhydride oxazoline lactam cyclic_amine cyclic_sulfur_compound phosphoesters phosphonate phostone siloxane carbosiloxane diol dicarboxylic acid diamines diacid chloride Example \u00b6 { \"_id\" : \"607f191e810c19729de860ea\" , \"type\" : \"expt\" , \"ver_sch\" : \"v0.1\" , \"ver_con\" : { \"_id\" : \"607f191e810c19729de860eb\" , \"num\" : \"v0.1\" }, \"date\" : [ { \"created\" : 1612889382 }, { \"last_mod\" : 1612889322 } ], \"notes\" : \"\" , \"name\" : \"styrene\" , \"expt\" : [{ \"_id\" : \"507f191e810c19729de860em\" , \"name\" : \"anionic polymerization of styrene\" }], \"proc\" : [{ \"_id\" : \"507f191e810c19729de860em\" , \"name\" : \"anionic polymerization\" , \"role\" : [ \"ingr\" ]}], \"data\" : [], \"iden\" : { \"names\" : [ \"styrene\" , \"vinylbenzene\" , \"phenylethylene\" ], \"cas\" : \"100-42-5\" , \"smiles\" : \"C=Cc1ccccc1\" , \"chem_form\" : \"C8H8\" }, \"prop\" : [ { \"key\" : \"mw\" , \"value\" : 104.15 , \"attr\" : { \"ref\" : { \"notes\" : \"sigma aldrich website\" }} }, { \"key\" : \"density\" , \"value\" : 0.906 }, { \"key\" : \"bp\" , \"value\" : 145 , \"attr\" : { \"+vac\" : \"1\" , \"+vac_unit\" : \"atm\" } } ], \"attr\" : { \"store\" : { \"temp_num\" : 0 , \"temp_unit\" : \"degC\" }, \"source\" : \"sigma\" } }","title":"Materials - other"},{"location":"data-models/Materials_O/#materials-other","text":"The 'material' node contains identity and property data for a chemical. This material node is specifically tailored for small molecules and inorganics. Features: material node points to data, and sample nodes required information name identity optional information data (CRIPT nodes) sample (CRIPT nodes) property keywords source lot_num storage conditions notes auto generate/update: _id class ver_sch ver_con (& all child) <-- update with version control node App features to support this node: allow additional optional information in iden , prop section given that it begins with + units are not stored for officially supported data as all official values are converted to database standard prior to storage","title":"Materials - other"},{"location":"data-models/Materials_O/#json-schema","text":"{ \"_id\" : objec t Id() , \"class\" : \"material_o\" , \"ver_sch\" : s tr i n g , \"ver_con\" : { \"_id\" : objec t Id() , \"num\" : s tr i n g }, \"date\" : [ { \"created\" : da tet ime }, { \"last_mod\" : da tet ime } ], \"name\" : s tr i n g , \"iden\" : { \"see identifiers\" : \"for details\" }, \"optional attributes\" }","title":"JSON Schema"},{"location":"data-models/Materials_O/#description","text":"Key Data Type Required Description _id objectId() auto unique database id class string auto class of node ver_sch string auto schema version; Ex: \"v0.1\" ver_con version control object ver_con/_id objectId() auto reference id to node history ver_con/num string auto type of node ; Ex: \"group\" date datetime object date/created datetime auto datetime created type/last_mod datetime auto last modified datetime name string required name of chemical iden list[dict] required see identifiers section","title":"Description"},{"location":"data-models/Materials_O/#attributes","text":"Attributes are optional properties that can be associated with this node. The following list is the officially supported keys. Users may define their own keys by placing a '+' in front of their custom key. Key Data Type Units Description sample list[dict] sample node sample/_id objectId() id of data sample/name string name of data data list[dict] data node data/_id objectId() id of data data/name string name of data data/type string type of data prop list[dict] see properties section keywords list[string] see keywords section below source string source of material lot_num string lot number store dict storage conditions store\\temp double degC storage temperature store\\time_num double min storage time store\\notes string notes related to storage note string free-form space to store any text","title":"Attributes"},{"location":"data-models/Materials_O/#identifiers","text":"Identifiers are chemical descriptors or unique ids which speaks to the chemical structure. Providing as many identifiers as possible great facilitate the findability of the associated data. Additionally, if sufficiently many identifiers are provided, the polymer ensemble can be constructed from these values. Mixtures are supported in this section by appending to list of identifiers. [ { 'Key' : value , 'Key' : value } ]","title":"Identifiers"},{"location":"data-models/Materials_O/#properties","text":"Properties consist of the following structure: { \"key\" : s tr i n g , \"method\" : s tr i n g , \"value\" : double , \"uncer\" : double , \"unit\" : s tr i n g , \"data\" : { \"_id\" : Objec t ID , \"name\" : s tr i n g , \"type\" : s tr i n g }, \"note\" : \"string\" } The range bound is limited to the largest number that can be stored in 64 bits (1.79e+308). Units are not stored for officially supported data as all official values are converted to database standard prior to storage Key Method Range Units Description ref_index [] [0, 1.79e+308] None a dimensionless number that describes how fast light travels through the material. density [] [0, 1.79e+308] None the amount of substance that fit within a unit of volume. mw ['nmr', 'ms'] [0, 1.79e+308] g/mol molecular weight conc [] [0, 1.79e+308] M concentration bp [] [-273.15, 1.79E308] degC boiling temperature mp [] [-273.15, 1.79E308] degC melting temperature vis ['viscometer'] [0, 1.79e+308] dl/g viscosity","title":"Properties"},{"location":"data-models/Materials_O/#keywords","text":"Keywords are an optional field that allow users to classify the experiment. Selecting multiple keywords is allowed. monomer initiator catalyst solvent olefin styrene diene cyclic_olefin vinyl vinyl_ether vinyl_ester acrylate methylacrylate lactone cyclic_ether cyclic_carbonate cyclic_anhydride oxazoline lactam cyclic_amine cyclic_sulfur_compound phosphoesters phosphonate phostone siloxane carbosiloxane diol dicarboxylic acid diamines diacid chloride","title":"Keywords"},{"location":"data-models/Materials_O/#example","text":"{ \"_id\" : \"607f191e810c19729de860ea\" , \"type\" : \"expt\" , \"ver_sch\" : \"v0.1\" , \"ver_con\" : { \"_id\" : \"607f191e810c19729de860eb\" , \"num\" : \"v0.1\" }, \"date\" : [ { \"created\" : 1612889382 }, { \"last_mod\" : 1612889322 } ], \"notes\" : \"\" , \"name\" : \"styrene\" , \"expt\" : [{ \"_id\" : \"507f191e810c19729de860em\" , \"name\" : \"anionic polymerization of styrene\" }], \"proc\" : [{ \"_id\" : \"507f191e810c19729de860em\" , \"name\" : \"anionic polymerization\" , \"role\" : [ \"ingr\" ]}], \"data\" : [], \"iden\" : { \"names\" : [ \"styrene\" , \"vinylbenzene\" , \"phenylethylene\" ], \"cas\" : \"100-42-5\" , \"smiles\" : \"C=Cc1ccccc1\" , \"chem_form\" : \"C8H8\" }, \"prop\" : [ { \"key\" : \"mw\" , \"value\" : 104.15 , \"attr\" : { \"ref\" : { \"notes\" : \"sigma aldrich website\" }} }, { \"key\" : \"density\" , \"value\" : 0.906 }, { \"key\" : \"bp\" , \"value\" : 145 , \"attr\" : { \"+vac\" : \"1\" , \"+vac_unit\" : \"atm\" } } ], \"attr\" : { \"store\" : { \"temp_num\" : 0 , \"temp_unit\" : \"degC\" }, \"source\" : \"sigma\" } }","title":"Example"},{"location":"data-models/Materials_P/","text":"Materials - Polymer \u00b6 The 'material' node contains identity and property data for a chemical. This material node is specifically tailored for polymers or mixtures containing polymers. Features: material node points to data, and sample nodes required information name identity optional information data (CRIPT nodes) sample (CRIPT nodes) property keywords source lot_num storage conditions notes auto generate/update: _id class ver_sch ver_con (& all child) <-- update with version control node sample properties App features to support this node: allow additional optional information in iden , prop section given that it begins with + units are not stored for officially supported data as all official values are converted to database standard prior to storage JSON Schema \u00b6 { \"_id\" : objec t Id() , \"class\" : \"material_p\" , \"ver_sch\" : s tr i n g , \"ver_con\" : { \"_id\" : objec t Id() , \"num\" : s tr i n g }, \"date\" : [ { \"created\" : da tet ime }, { \"last_mod\" : da tet ime } ], \"name\" : s tr i n g , \"iden\" : { \"see identifiers\" : \"for details\" }, \"optional attributes\" } Description \u00b6 Key Data Type Required Description _id objectId() auto unique database id class string auto class of node ver_sch string auto schema version; Ex: \"v0.1\" ver_con version control object ver_con/_id objectId() auto reference id to node history ver_con/num string auto type of node ; Ex: \"group\" date datetime object date/created datetime auto datetime created type/last_mod datetime auto last modified datetime name string required name of chemical iden list[dict] required see identifiers section Attributes \u00b6 Attributes are optional properties that can be associated with this node. The following list is the officially supported keys. Users may define their own keys by placing a '+' in front of their custom key. Key Data Type Units Description sample list[dict] sample node sample/_id objectId() id of sample sample/name string name of sample sample/prop list[dict] properties of sample data list[dict] data node data/_id objectId() id of data data/name string name of data data/type string type of data prop list[dict] see properties section keywords list[string] see keywords section below source string source of material lot_num string lot number store dict storage conditions store\\temp double degC storage temperature store\\time_num double min storage time store\\note string notes related to storage note string free-form space to store any text Identifiers \u00b6 Identifiers are chemical descriptors or unique ids which speaks to the chemical structure. Providing as many identifiers as possible great facilitate the findability of the associated data. Additionally, if sufficiently many identifiers are provided, the polymer ensemble can be constructed from these values. Mixtures are supported in this section by appending to list of identifiers. [ { 'Key' : value , 'Key' : value } ] Key Data Type Required Description names list[string] required Any name for the material cas string optional CAS number bigsmiles string optional bigSMILES Line Notation chem_repeat string optional chemical formula of repeating unit, Ex. polystyrene: \"C8H8\" smiles string optional simplified molecular-input line-entry system chem_form string optional chemical formula, Ex. benzene: \"C6H6\" Properties \u00b6 Properties consist of the following structure: { \"key\" : s tr i n g , \"method\" : s tr i n g , \"value\" : double , \"uncer\" : double , \"unit\" : s tr i n g , \"data\" : { \"_id\" : Objec t ID , \"name\" : s tr i n g , \"type\" : s tr i n g }, \"note\" : \"string\" } The range bound is limited to the largest number that can be stored in 64 bits (1.79e+308). Units are not stored for officially supported data as all official values are converted to database standard prior to storage Chemical \u00b6 Key Method Range Units Description m_n ['nmr', 'sec', 'maldi', 'osmtic_pres'] [0, 1.79e+308] g/mol Average molecular weight on the bases of moles or first moment of the molecular weight distribution. m_w ['nmr', 'sec', 'maldi', 'ls'] [0, 1.79e+308] g/mol Average molecular weight on the bases of weight. d ['sec', 'maldi'] [1, 1.79e+308] Ratio of weight averaged molecular weight over number average molecular weight. m_z ['nmr', 'sec', 'maldi', 'ultra_centr'] [0, 1.79e+308] g/mol m_v ['viscometer'] [0, 1.79e+308] g/mol Average molecular weight determined from viscosity mw_std_dev ['nmr', 'sec', 'maldi'] [0, 1.79e+308] g/mol Standard deviation of molecular weight distribution or square root of the second moment ofthe molecular weight distribution mw_var ['nmr', 'sec', 'maldi'] [0, 1.79e+308] g/mol Variance of molecular weight distribution or the second moment of the molecular weight distribution mw_skew ['nmr', 'sec', 'maldi'] [0, 1.79e+308] g/mol Skewness of molecular weight distribution or the third moment of the molecular weight distribution mw_kurtosis ['nmr', 'sec', 'maldi'] [0, 1.79e+308] g/mol Kurtosis of molecular weight distribution or the fourth moment of the molecular weight distribution tac_Pm ['nmr'] [0, 1] probability of finding meso diads (Pm) comp_frac [] [0, 1] composition: mole fraction of component ?????? branch Physical \u00b6 Key Method Range Units Description ref_index [] [0, 1.79e+308] None A dimensionless number that describes how fast light travels through the material. density [] [0, 1.79e+308] None The amount of substance that fit within a unit of volume. t_m ['dsc'] [-273.15, 1.79e+308] degC The transition temperature where crystal structures are destroyed. t_g ['dsc'] [-273.15, 1.79e+308] degC The transition temperature where a substances turns into a glass; vitrification. crys_frac ['dsc'] [0, 1.2] None Percent Crystallinity By Weight enth_crys ['dsc'] [-1.79e+308, 1.79e+308] J/mol Enthalpy of Crystallization, molar basis entr_crys ['dsc'] [-1.79e+308, 1.79e+308] J/mol/K Entropy of Crystallization, molar basis therm_cond [] [0, 1.79e+308] W/m/k Measure of a materials ability to conduct heat therm_expand_v [] [-1.79e+308, 1.79e+308] 1/K A change in volume in response to a change in temperature (not including phase transitions) therm_expand_l [] [-1.79e+308, 1.79e+308] 1/K A change in dimension in response to a change in temperature (not including phase transitions) c_p ['calorimetry', 'dsc'] [-1.79e+308, 1.79e+308] J/mol/K The amount of heat needed to be supplied to a given mole (based on repeat unit) to produce a change in temperature at constant pressure c_v [] [-1.79e+308, 1.79e+308] J/mol/K The amount of heat needed to be supplied to a given mole (based on repeat unit) to produce a change in temperature at constant volume therm_diff [] [-1.79e+308, 1.79e+308] m^2/s A measures the rate of transfer of heat of a material from the hot end to the cold end. tensile_mod ['utm'] [0, 1.79e+308] GPa tensile_str ['utm'] [0, 1.79e+308] MPa The maximum stress that a material can withstand while being stressed. yield_str ['utm'] [0, 1.79e+308] MPa Point on a stress-strain curve that indicates the limit of elastic behavior. frac_strain ['utm'] [1, 1.79e+308] None The maximum strain that a material can withstand while being stressed. intr_vis ['viscometer'] [0, 1.79e+308] dl/g A measure of a solute contribution to the viscosity of a solution mh_parameter_k ['sec', 'viscometer'] [0, 1.79e+308] ml/g Mark Houwink Parameters provide a relation between intrinsic viscosity and molecular weight mh_parameter_a ['sec', 'viscometer'] [0, 1.79e+308] None Mark Houwink Parameters provide a relation between intrinsic viscosity and molecular weight diff_coef [] [0, 1.79e+308] cm^2/s Proportionality constant between the molar flux due to molecular diffusion and the gradient of concentration. relax_time_seg [] [0, 1.79e+308] s Time it takes a polymer segement to relax relax_time_long [] [0, 1.79e+308] s Time longest time scale it takes to relax an applied stress iso_comp [] [-1.79e+308, 1.79e+308] m^2/N A change in volume in response to a change in pressure char_ratio [] [0, 1.79e+308] None A measure of chain flexibility. khun_len [] [0, 1.79e+308] angstrom A measure of chain flexibility. stat_seg_len [] [0, 1.79e+308] angstrom A measure of chain flexibility. persis_len [] [0, 1.79e+308] angstrom A measure of the bending stiffness of a polymer. r_g ['ls'] [0, 1.79e+308] nm The root-mean-square mass weighted average distance of monomers from the center of mass. r_h ['dls'] [0, 1.79e+308] nm The radius of an equivalent hard-sphere diffusing at the same rate as the molecule under observation virial_coef [] [0, 1.79e+308] cm^3 * mole/gram^2 inter_Parm [] [0, 1.79e+308] cm^3 * mole/gram^2 A measure of the interaction between molecules and the medium in which it is dissolved in. Methods \u00b6 Key Description nmr Nuclear Magnetic Resonance sec Size Exclusion Chromatography ms General Mass Spectrometry maldi Matrix Assisted Laser Desorption Ionization ultra_centr Ultra Centrifugation osmtic_pres Osmotic Pressure ls Static Light Scattering dls Dynamic Light Scattering viscometer Viscometer calorimetry Calorimetry utm Universal Testing Machine comp Computation or Simulation Keywords \u00b6 Keywords are an optional field that allow users to classify the experiment. Selecting multiple keywords is allowed. thermoset thermoplastic polyester polyolefin polyurethane polyamide polycarbonate silicone polyacylate conjugated_polymer copolymer block alternating gradient isotactic syndiotactic atactic regio_regualr regio_irregular linear star ring comb bottlebrush hyperbranch network Example \u00b6 { \"_id\" : \"607f191e810c19729de860ea\" , \"type\" : \"expt\" , \"ver_sch\" : \"v0.1\" , \"ver_con\" : { \"_id\" : \"607f191e810c19729de860eb\" , \"num\" : \"v0.1\" }, \"date\" : [ { \"created\" : 1612889382 }, { \"last_mod\" : 1612889322 } ], \"notes\" : \"\" , \"users\" : [ { \"_id\" : \"507f191e810c19729de860ec\" , \"name\" : \"Dylan W\" , \"perm\" : \"w\" } ], \"name\" : \"poly(styrene)\" , \"expt\" : [ { \"_id\" : \"507f191e810c19729de860em\" , \"name\" : \"anionic polymerization of styrene\" } ], \"iden\" : { \"names\" : [ \"Poly(1-phenylethene)\" ], \"cas\" : \"9003-53-6\" , \"bigsmiles\" : \"{[$]CC(c1ccccc1)[$]}\" , \"chem_repeat\" : \"C8H8\" }, \"prop\" : [ { \"key\" : \"conv_mon\" , \"method\" : \"NMR\" , \"value\" : 0.98 , \"uncertainty\" : 0.03 , \"attr\" : { \"data\" : { \"_id\" : \"507f191e810c19729de860em\" , \"key\" : \"nmr_1h\" }} }, { \"key\" : \"m_n\" , \"method\" : \"nmr\" , \"value\" : 5300 , \"uncertainty\" : 300 , \"attr\" : { \"data\" : { \"_id\" : \"507f191e810c19729de860em\" , \"key\" : \"nmr_1h\" }, \"names\" : [ \"end group analysis\" ]} }, { \"key\" : \"m_n\" , \"method\" : \"sec\" , \"value\" : 5130 , \"uncertainty\" : 200 , \"attr\" : { \"data\" : { \"_id\" : \"507f191e810c19729de860em\" , \"key\" : \"sec\" }} }, { \"key\" : \"d\" , \"method\" : \"sec\" , \"value\" : 1.03 , \"uncertainty\" : 0.02 , \"attr\" : { \"data\" : { \"_id\" : \"507f191e810c19729de860em\" , \"key\" : \"sec\" }} } ], \"proc\" : [ { \"_id\" : \"507f191e810c19729de860em\" , \"name\" : \"anionic polymerization\" , \"role\" : [ \"prod\" ]} ], \"data\" : [ { \"_id\" : \"507f191e810c19729de860ef\" , \"key\" : \"nmr_1h\" }, { \"_id\" : \"507f191e810c19729de860vm\" , \"key\" : \"sec\" } ], \"attr\" : {} }","title":"Materials - polymers"},{"location":"data-models/Materials_P/#materials-polymer","text":"The 'material' node contains identity and property data for a chemical. This material node is specifically tailored for polymers or mixtures containing polymers. Features: material node points to data, and sample nodes required information name identity optional information data (CRIPT nodes) sample (CRIPT nodes) property keywords source lot_num storage conditions notes auto generate/update: _id class ver_sch ver_con (& all child) <-- update with version control node sample properties App features to support this node: allow additional optional information in iden , prop section given that it begins with + units are not stored for officially supported data as all official values are converted to database standard prior to storage","title":"Materials - Polymer"},{"location":"data-models/Materials_P/#json-schema","text":"{ \"_id\" : objec t Id() , \"class\" : \"material_p\" , \"ver_sch\" : s tr i n g , \"ver_con\" : { \"_id\" : objec t Id() , \"num\" : s tr i n g }, \"date\" : [ { \"created\" : da tet ime }, { \"last_mod\" : da tet ime } ], \"name\" : s tr i n g , \"iden\" : { \"see identifiers\" : \"for details\" }, \"optional attributes\" }","title":"JSON Schema"},{"location":"data-models/Materials_P/#description","text":"Key Data Type Required Description _id objectId() auto unique database id class string auto class of node ver_sch string auto schema version; Ex: \"v0.1\" ver_con version control object ver_con/_id objectId() auto reference id to node history ver_con/num string auto type of node ; Ex: \"group\" date datetime object date/created datetime auto datetime created type/last_mod datetime auto last modified datetime name string required name of chemical iden list[dict] required see identifiers section","title":"Description"},{"location":"data-models/Materials_P/#attributes","text":"Attributes are optional properties that can be associated with this node. The following list is the officially supported keys. Users may define their own keys by placing a '+' in front of their custom key. Key Data Type Units Description sample list[dict] sample node sample/_id objectId() id of sample sample/name string name of sample sample/prop list[dict] properties of sample data list[dict] data node data/_id objectId() id of data data/name string name of data data/type string type of data prop list[dict] see properties section keywords list[string] see keywords section below source string source of material lot_num string lot number store dict storage conditions store\\temp double degC storage temperature store\\time_num double min storage time store\\note string notes related to storage note string free-form space to store any text","title":"Attributes"},{"location":"data-models/Materials_P/#identifiers","text":"Identifiers are chemical descriptors or unique ids which speaks to the chemical structure. Providing as many identifiers as possible great facilitate the findability of the associated data. Additionally, if sufficiently many identifiers are provided, the polymer ensemble can be constructed from these values. Mixtures are supported in this section by appending to list of identifiers. [ { 'Key' : value , 'Key' : value } ] Key Data Type Required Description names list[string] required Any name for the material cas string optional CAS number bigsmiles string optional bigSMILES Line Notation chem_repeat string optional chemical formula of repeating unit, Ex. polystyrene: \"C8H8\" smiles string optional simplified molecular-input line-entry system chem_form string optional chemical formula, Ex. benzene: \"C6H6\"","title":"Identifiers"},{"location":"data-models/Materials_P/#properties","text":"Properties consist of the following structure: { \"key\" : s tr i n g , \"method\" : s tr i n g , \"value\" : double , \"uncer\" : double , \"unit\" : s tr i n g , \"data\" : { \"_id\" : Objec t ID , \"name\" : s tr i n g , \"type\" : s tr i n g }, \"note\" : \"string\" } The range bound is limited to the largest number that can be stored in 64 bits (1.79e+308). Units are not stored for officially supported data as all official values are converted to database standard prior to storage","title":"Properties"},{"location":"data-models/Materials_P/#keywords","text":"Keywords are an optional field that allow users to classify the experiment. Selecting multiple keywords is allowed. thermoset thermoplastic polyester polyolefin polyurethane polyamide polycarbonate silicone polyacylate conjugated_polymer copolymer block alternating gradient isotactic syndiotactic atactic regio_regualr regio_irregular linear star ring comb bottlebrush hyperbranch network","title":"Keywords"},{"location":"data-models/Materials_P/#example","text":"{ \"_id\" : \"607f191e810c19729de860ea\" , \"type\" : \"expt\" , \"ver_sch\" : \"v0.1\" , \"ver_con\" : { \"_id\" : \"607f191e810c19729de860eb\" , \"num\" : \"v0.1\" }, \"date\" : [ { \"created\" : 1612889382 }, { \"last_mod\" : 1612889322 } ], \"notes\" : \"\" , \"users\" : [ { \"_id\" : \"507f191e810c19729de860ec\" , \"name\" : \"Dylan W\" , \"perm\" : \"w\" } ], \"name\" : \"poly(styrene)\" , \"expt\" : [ { \"_id\" : \"507f191e810c19729de860em\" , \"name\" : \"anionic polymerization of styrene\" } ], \"iden\" : { \"names\" : [ \"Poly(1-phenylethene)\" ], \"cas\" : \"9003-53-6\" , \"bigsmiles\" : \"{[$]CC(c1ccccc1)[$]}\" , \"chem_repeat\" : \"C8H8\" }, \"prop\" : [ { \"key\" : \"conv_mon\" , \"method\" : \"NMR\" , \"value\" : 0.98 , \"uncertainty\" : 0.03 , \"attr\" : { \"data\" : { \"_id\" : \"507f191e810c19729de860em\" , \"key\" : \"nmr_1h\" }} }, { \"key\" : \"m_n\" , \"method\" : \"nmr\" , \"value\" : 5300 , \"uncertainty\" : 300 , \"attr\" : { \"data\" : { \"_id\" : \"507f191e810c19729de860em\" , \"key\" : \"nmr_1h\" }, \"names\" : [ \"end group analysis\" ]} }, { \"key\" : \"m_n\" , \"method\" : \"sec\" , \"value\" : 5130 , \"uncertainty\" : 200 , \"attr\" : { \"data\" : { \"_id\" : \"507f191e810c19729de860em\" , \"key\" : \"sec\" }} }, { \"key\" : \"d\" , \"method\" : \"sec\" , \"value\" : 1.03 , \"uncertainty\" : 0.02 , \"attr\" : { \"data\" : { \"_id\" : \"507f191e810c19729de860em\" , \"key\" : \"sec\" }} } ], \"proc\" : [ { \"_id\" : \"507f191e810c19729de860em\" , \"name\" : \"anionic polymerization\" , \"role\" : [ \"prod\" ]} ], \"data\" : [ { \"_id\" : \"507f191e810c19729de860ef\" , \"key\" : \"nmr_1h\" }, { \"_id\" : \"507f191e810c19729de860vm\" , \"key\" : \"sec\" } ], \"attr\" : {} }","title":"Example"},{"location":"data-models/Modules/","text":"Models \u00b6 under construction Modules are computation nodes. They input a data node, preform a mathematical operation, and result in either another 'processed' data node or a material property. Example \u00b6 red are data nodes gray are module nodes output is properties in a material node","title":"Models"},{"location":"data-models/Modules/#models","text":"under construction Modules are computation nodes. They input a data node, preform a mathematical operation, and result in either another 'processed' data node or a material property.","title":"Models"},{"location":"data-models/Modules/#example","text":"red are data nodes gray are module nodes output is properties in a material node","title":"Example"},{"location":"data-models/Polymers/","text":"Challenges of Polymer Data \u00b6 Polymers are large stochastic molecules which can assemble in hierarchical structures depending on processing conditions. Ultimately, this means that there is no single representation that can capture the full molecular detail of a polymer material. This lack of a single identifier provides a significant challenge for large scale data analysis. Polymers are a result of a system of stochastic reactions. This leads to distributions in chain length, composition, and topology making it impossible to completely represent a polymer in a single quantity. The combination of a structural description (like a chemical drawing or bigSMILES), and distribution information would be required to completely define the identity of a polymer. In practice, moments of distributions (average molecular weight) or ratio of composition are provided to approximately define a polymer as they are easier to work with and experiment obtain. Moreover, data collection methods are highly variable, typically provided relative structure inform and/or use of theoretical models which requires expert knowledge to put into context. In some cases experimentally obtaining structural information is impossible, and information from prior processing steps is needed. To complicate the matters further, polymers can assemble into a wide range of structures through phenomena like phase segregation and crystallization. The formation of these structures can be highly influenced by the processing conditioning under which the material was made. Ultimately, this makes polymer-informatics messy as data set that do not completely capture of all the relevant polymer data will be incapable of proving reliable data and hindering large data science efforts. Comparison to small molecules \u00b6 Molecule-property tuple/pair style of data storage relates desired properties with the structures of a molecule. Data in this format fits naturally into widely available and well-supported database technologies, which store data in a series of tables relating molecular properties with the corresponding chemical descriptors. Assimilating data from different sources is straightforward as the chemical descriptors can be used unambiguously to define the chemical system and provide a handle to collate and aggregate distinct instances of data for the same chemical object. For most molecules, this information is conveniently encoded with representations that detail their chemical connectivity, such as SMILES ( simplified molecular-input line-entry system ) strings for organic molecules, nucleic acid sequences for RNA, or amino acid sequences for proteins. Natural Language Processing (NLP) for polymer data \u00b6 Extracting polymer information with natural language processing is considerably more challenging for polymers than small molecules because there is no uniform nomenclature (typically generic terminology used), figures of polymer structure are extremely high variability, and ultimately a combination of figures, raw data, generic terminology and expert knowledge are all needs to define a polymer structure and to put into context. Thus, hindering the generation of reliable databases from prior literature. Nevertheless, the CRIPT initiative seeks to create the tools to address this challenge. Current Polymer Databases \u00b6 Currently, for most available datasets, polymer entries are identified through names of the polymers and lack complete characterization data. This leads to ambiguity and incompleteness in molecular structure specification. Bicerano, J., Prediction of Polymer Properties, 3rd Edition. CRC Press: 2002, DOI: 10.1201/9780203910115 . Brandrup, J.; Immergut, E. H.; Grulke, E. A.; Abe, A.; Bloch, D. R., Polymer Handbook . Wiley New York: 1999. Polymer Property Predictor and Database. http://pppdb.uchicago.edu/ Otsuka, S.; Kuwajima, I.; Hosoya, J.; Xu, Y.; Yamazaki, M. PoLyInfo: Polymer Database for Polymeric Materials Design. 2011, IEEE, 22\u2013 29, DOI: 10.1109/EIDWT.2011.13 . Mark, J. E., Physical Properties of Polymers Handbook. Springer: 2007, DOI: 10.1007/978-0-387-69002-5 . CHEMnetBASE - Polymers: a Property Database. http://poly.chemnetbase.com/faces/polymers/PolymerSearch.xhtml NanoMine. http://materialsmine.org/nm Other Material Data Models \u00b6 The CRIPT data structure was not the first design to address the complexities of polymer material data storage. PolyDAT and GEMD were both previously develop and were a large inspiration to the CRIPT data structure. PolyDAT J. Chem. Inf. Model. 2021, doi: 10.1021/acs.jcim.1c00028 PolyDAT is a schema developed by a team led by Brad Olsen at MIT and focuses on specifying the molecular structures of polymers and associate chemical characterization. The schema was designed around a single document based schema that is well suited for publication supporting information. GEMD https://citrineinformatics.github.io/gemd-docs/ GEMD is a schema developed by Citrine Informatics to model materials and associated data. GEMD stands for Graphical Expression of Materials Data. The schema was designed around a data objects making well suited for large database projects.","title":"Challanges of Polymers"},{"location":"data-models/Polymers/#challenges-of-polymer-data","text":"Polymers are large stochastic molecules which can assemble in hierarchical structures depending on processing conditions. Ultimately, this means that there is no single representation that can capture the full molecular detail of a polymer material. This lack of a single identifier provides a significant challenge for large scale data analysis. Polymers are a result of a system of stochastic reactions. This leads to distributions in chain length, composition, and topology making it impossible to completely represent a polymer in a single quantity. The combination of a structural description (like a chemical drawing or bigSMILES), and distribution information would be required to completely define the identity of a polymer. In practice, moments of distributions (average molecular weight) or ratio of composition are provided to approximately define a polymer as they are easier to work with and experiment obtain. Moreover, data collection methods are highly variable, typically provided relative structure inform and/or use of theoretical models which requires expert knowledge to put into context. In some cases experimentally obtaining structural information is impossible, and information from prior processing steps is needed. To complicate the matters further, polymers can assemble into a wide range of structures through phenomena like phase segregation and crystallization. The formation of these structures can be highly influenced by the processing conditioning under which the material was made. Ultimately, this makes polymer-informatics messy as data set that do not completely capture of all the relevant polymer data will be incapable of proving reliable data and hindering large data science efforts.","title":"Challenges of Polymer Data"},{"location":"data-models/Polymers/#comparison-to-small-molecules","text":"Molecule-property tuple/pair style of data storage relates desired properties with the structures of a molecule. Data in this format fits naturally into widely available and well-supported database technologies, which store data in a series of tables relating molecular properties with the corresponding chemical descriptors. Assimilating data from different sources is straightforward as the chemical descriptors can be used unambiguously to define the chemical system and provide a handle to collate and aggregate distinct instances of data for the same chemical object. For most molecules, this information is conveniently encoded with representations that detail their chemical connectivity, such as SMILES ( simplified molecular-input line-entry system ) strings for organic molecules, nucleic acid sequences for RNA, or amino acid sequences for proteins.","title":"Comparison to small molecules"},{"location":"data-models/Polymers/#natural-language-processing-nlp-for-polymer-data","text":"Extracting polymer information with natural language processing is considerably more challenging for polymers than small molecules because there is no uniform nomenclature (typically generic terminology used), figures of polymer structure are extremely high variability, and ultimately a combination of figures, raw data, generic terminology and expert knowledge are all needs to define a polymer structure and to put into context. Thus, hindering the generation of reliable databases from prior literature. Nevertheless, the CRIPT initiative seeks to create the tools to address this challenge.","title":"Natural Language Processing (NLP) for polymer data"},{"location":"data-models/Polymers/#current-polymer-databases","text":"Currently, for most available datasets, polymer entries are identified through names of the polymers and lack complete characterization data. This leads to ambiguity and incompleteness in molecular structure specification. Bicerano, J., Prediction of Polymer Properties, 3rd Edition. CRC Press: 2002, DOI: 10.1201/9780203910115 . Brandrup, J.; Immergut, E. H.; Grulke, E. A.; Abe, A.; Bloch, D. R., Polymer Handbook . Wiley New York: 1999. Polymer Property Predictor and Database. http://pppdb.uchicago.edu/ Otsuka, S.; Kuwajima, I.; Hosoya, J.; Xu, Y.; Yamazaki, M. PoLyInfo: Polymer Database for Polymeric Materials Design. 2011, IEEE, 22\u2013 29, DOI: 10.1109/EIDWT.2011.13 . Mark, J. E., Physical Properties of Polymers Handbook. Springer: 2007, DOI: 10.1007/978-0-387-69002-5 . CHEMnetBASE - Polymers: a Property Database. http://poly.chemnetbase.com/faces/polymers/PolymerSearch.xhtml NanoMine. http://materialsmine.org/nm","title":"Current Polymer Databases"},{"location":"data-models/Polymers/#other-material-data-models","text":"The CRIPT data structure was not the first design to address the complexities of polymer material data storage. PolyDAT and GEMD were both previously develop and were a large inspiration to the CRIPT data structure. PolyDAT J. Chem. Inf. Model. 2021, doi: 10.1021/acs.jcim.1c00028 PolyDAT is a schema developed by a team led by Brad Olsen at MIT and focuses on specifying the molecular structures of polymers and associate chemical characterization. The schema was designed around a single document based schema that is well suited for publication supporting information. GEMD https://citrineinformatics.github.io/gemd-docs/ GEMD is a schema developed by Citrine Informatics to model materials and associated data. GEMD stands for Graphical Expression of Materials Data. The schema was designed around a data objects making well suited for large database projects.","title":"Other Material Data Models"},{"location":"data-models/Process/","text":"Process \u00b6 The 'process' node contains ingredient list, quantities, and procedure information. A process can be anything from a reaction, reaction + separation, reactive extrusion. Typically, a process results in a change in the \"identity\" portion of a material node. Features: process node points to materials and data required information name ingredient (material CRIPT node) procedure product optional information data (CRIPT node) conditions properties keywords history note auto generate/update: _id class ver_sch ver_con (& all child) <-- update with version control node date (& all child) App features to support this node: allow additional optional information in cond section given that it begins with + units are not stored for officially supported data as all official values are converted to database standard prior to storage JSON Schema \u00b6 { \"_id\" : objec t Id() , \"class\" : \"process\" , \"ver_sch\" : s tr i n g , \"ver_con\" : { \"_id\" : objec t Id() , \"num\" : s tr i n g }, \"date\" : [ { \"created\" : da tet ime }, { \"last_mod\" : da tet ime } ], \"name\" : s tr i n g , \"ingr\" : [ \"see ingredients for details\" ], \"procedure\" : s tr i n g , \"product\" : [{ \"_id\" : objec t Id() , \"name\" : s tr i n g }], \"optional attributes\" } Description \u00b6 Key Data Type Required Description _id objectId() auto unique database id class string auto class of node ver_sch string auto schema version; Ex: \"v0.1\" ver_con version control object ver_con/_id objectId() auto reference id to node history ver_con/num string auto type of node ; Ex: \"group\" date datetime object date/created datetime auto datetime created type/last_mod datetime auto last modified datetime name string required name of process ingr list[dict] required see identifiers section procedure string required written procedure for the process product list[dict] required the product of the process node; material node product/_id objectId() auto id of product product/name string auto name of product Attributes \u00b6 Attributes are optional properties that can be associated with this node. The following list is the officially supported keys. Users may define their own keys by placing a '+' in front of their custom key. Key Data Type Description data list[dict] data node data/_id objectId() id of data data/name string name of data data/type string type of data cond list[dict] see condition section prop list[dict] see condition section keywords list[string] see keywords section below history dict processing history note string free-form space to store any text Ingredients \u00b6 Ingredients are originally defined as a material node and linked here. A minimum of 1 quantity is required. List of supported quantities (quant), units and valid ranges. Units are not stored as all values are converted to database standard prior to storage. { \"_id\" : objec t Id() , \"name\" : s tr i n g , \"quant\" : [ { \"key\" : s tr i n g , \"value\" : double , \"uncer\" : double } ] } Key Units Range Description mass g [0, 1.79e+308] mass vol ml [0, 1.79e+308] volume pres kPa [0, 1.79e+308] partial pressure mole mmol [0, 1.79e+308] mole equiv [0, 1.79e+308] equivalence mass_frac [0-1] mass fraction mole_frac [0-1] mole fraction vol_frac [0-1] volume fraction Conditions \u00b6 Conditions are any process variable that the user would like to explicitly expose. Conditions such as temperature, pressure, or reaction times are examples. The conditions are stored in a dictionary. Units are only used for user defined attributes which begin with a + . { \"key\" : s tr i n g , \"method\" : s tr i n g , \"value\" : double , \"uncer\" : double , \"unit\" : s tr i n g , \"data\" : { \"_id\" : Objec t ID , \"name\" : s tr i n g , \"type\" : s tr i n g }, \"note\" : \"string\" } key Units Description time min time temp degC temperature pres kPa pressure (absolute) Properties \u00b6 Properties consist of the following structure: { \"key\" : s tr i n g , \"method\" : s tr i n g , \"value\" : double , \"uncer\" : double , \"unit\" : s tr i n g , \"data\" : { \"_id\" : Objec t ID , \"name\" : s tr i n g , \"type\" : s tr i n g }, \"note\" : \"string\" } Key Method Range Units Description conv_mon ['nmr', 'sec'] [0, 1.2] None how much monomer that has reacted conv_init ['nmr', 'sec'] [0, 1.2] None how much initiator that has reacted init_eff ['nmr', 'sec'] [0, 1.2] None The proportion of initiators that result in an active propagating species Keywords \u00b6 Keywords are an optional field that allow users to classify the experiment. Selecting multiple keywords is allowed. synthesis chain_growth living_poly controlled_poly radical_poly rop romp atrp nmp raft step_growth condensation reactive_processing extrusion blow_molding kinetics Process history \u00b6 Under construction The process history is a feature in development. The feature will take the procedure given by an user and convert it into an expand-graph detailing intermediate steps. This feature will be powered by a NLP algorithm that is under development. Example \u00b6 { \"_id\" : \"507f191e810c19729de860ec\" , \"type\" : \"process\" , \"ver_sch\" : \"v0.1\" , \"ver_con\" : { \"_id\" : \"507f191e810c19729de860cb\" , \"num\" : \"v0.1\" }, \"date\" : [ { \"created\" : 1612889183 }, { \"last_mod\" : 1612889123 } ], \"notes\" : \"\" , \"expt\" : { \"_id\" : \"507f191e810c19729de860em\" , \"name\" : \"anionic polymerization of styrene\" }, \"data\" : [{ \"_id\" : \"507f191e810c19729de860em\" , \"name\" : \"NMR Kinetics\" }], \"product\" : [{ \"_id\" : \"507f191e810c19729de5d0em\" , \"name\" : \"polystyrene\" }], \"name\" : \"polymerization\" , \"ingr\" : [ { \"_id\" : \"507f191e810c19729de860em\" , \"name\" : \"styrene\" , \"chem_form\" : \"C8H8\" , \"quantities\" : [ { \"type\" : \"mass\" , \"value\" : 20.3 }, { \"type\" : \"vol\" , \"value\" : 22.3 }, { \"type\" : \"mole\" , \"value\" : 195 }, { \"type\" : \"equiv\" , \"value\" : 50 } ] }, { \"_id\" : \"507f191e810c19729de560em\" , \"name\" : \"sec-bu li\" , \"chem_form\" : \"C4H9Li1\" , \"quantities\" : [ { \"type\" : \"vol\" , \"value\" : 3 }, { \"type\" : \"mole\" , \"value\" : 3.9 }, { \"type\" : \"equiv\" , \"value\" : 1 } ] }, { \"_id\" : \"507f191e810c19729de560em\" , \"name\" : \"toluene\" , \"chem_form\" : \"C7H8\" , \"quantities\" : [ { \"type\" : \"mass\" , \"value\" : 188 }, { \"type\" : \"vol\" , \"value\" : 216 }, { \"type\" : \"mole\" , \"value\" : 2039 }, { \"type\" : \"equiv\" , \"value\" : 522 } ] }, { \"_id\" : \"507f191e810c19729de560em\" , \"name\" : \"methanol\" , \"chem_form\" : \"C1H4O1\" , \"quantities\" : [ { \"type\" : \"mass\" , \"value\" : 2.37 }, { \"type\" : \"vol\" , \"value\" : 3 }, { \"type\" : \"mole\" , \"value\" : 74 }, { \"type\" : \"equiv\" , \"value\" : 19 } ] } ], \"procedure\" : \"In an argon filled glovebox, a round bottom flask was filled with 216 ml of dried toluene. The solution of secBuLi (3 ml, 3.9 mmol) was added next, followed by styrene (22.3 g, 176 mmol) to initiate the polymerization. The reaction mixture immediately turned orange. After 30 min, the reaction was quenched with the addition of 3 ml of methanol. The polymer was isolated by precipitation in methanol 3 times and dried under vacuum.\" , \"cond\" : { \"time\" : { \"value\" : [ 60 ]}, \"temp\" : { \"value\" : [ 25 ]} }, \"attr\" : {} }","title":"Process"},{"location":"data-models/Process/#process","text":"The 'process' node contains ingredient list, quantities, and procedure information. A process can be anything from a reaction, reaction + separation, reactive extrusion. Typically, a process results in a change in the \"identity\" portion of a material node. Features: process node points to materials and data required information name ingredient (material CRIPT node) procedure product optional information data (CRIPT node) conditions properties keywords history note auto generate/update: _id class ver_sch ver_con (& all child) <-- update with version control node date (& all child) App features to support this node: allow additional optional information in cond section given that it begins with + units are not stored for officially supported data as all official values are converted to database standard prior to storage","title":"Process"},{"location":"data-models/Process/#json-schema","text":"{ \"_id\" : objec t Id() , \"class\" : \"process\" , \"ver_sch\" : s tr i n g , \"ver_con\" : { \"_id\" : objec t Id() , \"num\" : s tr i n g }, \"date\" : [ { \"created\" : da tet ime }, { \"last_mod\" : da tet ime } ], \"name\" : s tr i n g , \"ingr\" : [ \"see ingredients for details\" ], \"procedure\" : s tr i n g , \"product\" : [{ \"_id\" : objec t Id() , \"name\" : s tr i n g }], \"optional attributes\" }","title":"JSON Schema"},{"location":"data-models/Process/#description","text":"Key Data Type Required Description _id objectId() auto unique database id class string auto class of node ver_sch string auto schema version; Ex: \"v0.1\" ver_con version control object ver_con/_id objectId() auto reference id to node history ver_con/num string auto type of node ; Ex: \"group\" date datetime object date/created datetime auto datetime created type/last_mod datetime auto last modified datetime name string required name of process ingr list[dict] required see identifiers section procedure string required written procedure for the process product list[dict] required the product of the process node; material node product/_id objectId() auto id of product product/name string auto name of product","title":"Description"},{"location":"data-models/Process/#attributes","text":"Attributes are optional properties that can be associated with this node. The following list is the officially supported keys. Users may define their own keys by placing a '+' in front of their custom key. Key Data Type Description data list[dict] data node data/_id objectId() id of data data/name string name of data data/type string type of data cond list[dict] see condition section prop list[dict] see condition section keywords list[string] see keywords section below history dict processing history note string free-form space to store any text","title":"Attributes"},{"location":"data-models/Process/#ingredients","text":"Ingredients are originally defined as a material node and linked here. A minimum of 1 quantity is required. List of supported quantities (quant), units and valid ranges. Units are not stored as all values are converted to database standard prior to storage. { \"_id\" : objec t Id() , \"name\" : s tr i n g , \"quant\" : [ { \"key\" : s tr i n g , \"value\" : double , \"uncer\" : double } ] } Key Units Range Description mass g [0, 1.79e+308] mass vol ml [0, 1.79e+308] volume pres kPa [0, 1.79e+308] partial pressure mole mmol [0, 1.79e+308] mole equiv [0, 1.79e+308] equivalence mass_frac [0-1] mass fraction mole_frac [0-1] mole fraction vol_frac [0-1] volume fraction","title":"Ingredients"},{"location":"data-models/Process/#conditions","text":"Conditions are any process variable that the user would like to explicitly expose. Conditions such as temperature, pressure, or reaction times are examples. The conditions are stored in a dictionary. Units are only used for user defined attributes which begin with a + . { \"key\" : s tr i n g , \"method\" : s tr i n g , \"value\" : double , \"uncer\" : double , \"unit\" : s tr i n g , \"data\" : { \"_id\" : Objec t ID , \"name\" : s tr i n g , \"type\" : s tr i n g }, \"note\" : \"string\" } key Units Description time min time temp degC temperature pres kPa pressure (absolute)","title":"Conditions"},{"location":"data-models/Process/#properties","text":"Properties consist of the following structure: { \"key\" : s tr i n g , \"method\" : s tr i n g , \"value\" : double , \"uncer\" : double , \"unit\" : s tr i n g , \"data\" : { \"_id\" : Objec t ID , \"name\" : s tr i n g , \"type\" : s tr i n g }, \"note\" : \"string\" } Key Method Range Units Description conv_mon ['nmr', 'sec'] [0, 1.2] None how much monomer that has reacted conv_init ['nmr', 'sec'] [0, 1.2] None how much initiator that has reacted init_eff ['nmr', 'sec'] [0, 1.2] None The proportion of initiators that result in an active propagating species","title":"Properties"},{"location":"data-models/Process/#process-history","text":"Under construction The process history is a feature in development. The feature will take the procedure given by an user and convert it into an expand-graph detailing intermediate steps. This feature will be powered by a NLP algorithm that is under development.","title":"Process history"},{"location":"data-models/Process/#example","text":"{ \"_id\" : \"507f191e810c19729de860ec\" , \"type\" : \"process\" , \"ver_sch\" : \"v0.1\" , \"ver_con\" : { \"_id\" : \"507f191e810c19729de860cb\" , \"num\" : \"v0.1\" }, \"date\" : [ { \"created\" : 1612889183 }, { \"last_mod\" : 1612889123 } ], \"notes\" : \"\" , \"expt\" : { \"_id\" : \"507f191e810c19729de860em\" , \"name\" : \"anionic polymerization of styrene\" }, \"data\" : [{ \"_id\" : \"507f191e810c19729de860em\" , \"name\" : \"NMR Kinetics\" }], \"product\" : [{ \"_id\" : \"507f191e810c19729de5d0em\" , \"name\" : \"polystyrene\" }], \"name\" : \"polymerization\" , \"ingr\" : [ { \"_id\" : \"507f191e810c19729de860em\" , \"name\" : \"styrene\" , \"chem_form\" : \"C8H8\" , \"quantities\" : [ { \"type\" : \"mass\" , \"value\" : 20.3 }, { \"type\" : \"vol\" , \"value\" : 22.3 }, { \"type\" : \"mole\" , \"value\" : 195 }, { \"type\" : \"equiv\" , \"value\" : 50 } ] }, { \"_id\" : \"507f191e810c19729de560em\" , \"name\" : \"sec-bu li\" , \"chem_form\" : \"C4H9Li1\" , \"quantities\" : [ { \"type\" : \"vol\" , \"value\" : 3 }, { \"type\" : \"mole\" , \"value\" : 3.9 }, { \"type\" : \"equiv\" , \"value\" : 1 } ] }, { \"_id\" : \"507f191e810c19729de560em\" , \"name\" : \"toluene\" , \"chem_form\" : \"C7H8\" , \"quantities\" : [ { \"type\" : \"mass\" , \"value\" : 188 }, { \"type\" : \"vol\" , \"value\" : 216 }, { \"type\" : \"mole\" , \"value\" : 2039 }, { \"type\" : \"equiv\" , \"value\" : 522 } ] }, { \"_id\" : \"507f191e810c19729de560em\" , \"name\" : \"methanol\" , \"chem_form\" : \"C1H4O1\" , \"quantities\" : [ { \"type\" : \"mass\" , \"value\" : 2.37 }, { \"type\" : \"vol\" , \"value\" : 3 }, { \"type\" : \"mole\" , \"value\" : 74 }, { \"type\" : \"equiv\" , \"value\" : 19 } ] } ], \"procedure\" : \"In an argon filled glovebox, a round bottom flask was filled with 216 ml of dried toluene. The solution of secBuLi (3 ml, 3.9 mmol) was added next, followed by styrene (22.3 g, 176 mmol) to initiate the polymerization. The reaction mixture immediately turned orange. After 30 min, the reaction was quenched with the addition of 3 ml of methanol. The polymer was isolated by precipitation in methanol 3 times and dried under vacuum.\" , \"cond\" : { \"time\" : { \"value\" : [ 60 ]}, \"temp\" : { \"value\" : [ 25 ]} }, \"attr\" : {} }","title":"Example"},{"location":"data-models/Publications/","text":"Publications \u00b6 The 'publication' node contains data related to a publication. Publication nodes can be generated at any time in the research process, and experiments can be associated with the publication. The version number can be used to determine the stage of the publication. Features: publication can reference users, groups, experiments required information title optional information collections (CRIPT nodes) title authors journal publisher year vol issue pages doi issn arxiv_id PMID website notes auto generate/update: _id class ver_sch ver_con (& all child) <-- update with version control node date (& all child) App features to support this node: a page to fill out publication details a tool to look up experiments, or enter _id a similar look up tool for users, and groups allow additional optional information in attribute section given that it begins with + JSON Schema \u00b6 { \"_id\" : objec t Id() , \"class\" : \"pub\" , \"ver_sch\" : s tr i n g , \"ver_con\" : { \"_id\" : objec t Id() , \"num\" : s tr i n g }, \"date\" : [ { \"created\" : da tet ime }, { \"last_mod\" : da tet ime } ], \"title\" : s tr i n g , \"optional attributes\" } Description \u00b6 Key Data Type Required Description _id objectId() auto unique database id class string auto class of node ver_sch string auto schema version; Ex: \"v0.1\" ver_con version control object ver_con/_id objectId() auto reference id to node history ver_con/num string auto type of node ; Ex: \"group\" date datetime object date/created datetime auto datetime created type/last_mod datetime auto last modified datetime title string required publication title Attributes \u00b6 Attributes are optional properties that can be associated with this node. The following list is the officially supported keys. Users may define their own keys by placing a '+' in front of their custom key. Key Data Type Description coll collection nodes coll\\_id objectId() id of collection coll\\name string name of collection coll\\date datetime date collection created authors list[string] authors author list[dict] authors details author\\orcid objectId() author ORCID number author\\name string author name journal string journal publisher string publisher year int publishing year vol int volume number issue int issue number pages string page number doi string DOI: digital object identifier issn string ISSN: international standard serial number arxiv_id string arXiv identifier PMID string PubMed ID web string publication website note string free-form space to store any text Example \u00b6 { \"_id\" : \"507f191e810c19729de861ec\" , \"type\" : \"pub\" , \"ver_sch\" : \"v0.1\" , \"ver_con\" : { \"_id\" : \"507f191e810c19729de861cb\" , \"num\" : \"v2.1\" }, \"date\" : [ { \"created\" : 1612881183 }, { \"last_mod\" : 1612881123 } ], \"notes\" : \"\" , \"users\" : [ { \"_id\" : \"507f191e810c19729de860ec\" , \"name\" : \"Dylan W\" , \"perm\" : \"w\" } ], \"expt\" : [ { \"_id\" : \"507f191e810c19729de860em\" , \"name\" : \"ROMP monomer order kinetic study\" , \"date\" : 1612886423 }, { \"_id\" : \"507f191e810c19729de860en\" , \"name\" : \"PLA bottlebrush synthesis\" , \"date\" : 1612886423 }, { \"_id\" : \"507f191e810c19729de860ej\" , \"name\" : \"ROP of lactide kinetics\" , \"date\" : 1612886423 } ], \"attr\" : { \"title\" : \"Engineering of Molecular Geometry in Bottlebrush Polymers\" , \"authors\" : [ \"Walsh, Dylan J.\" , \"Dutta, Sarit\" , \"Sing, Charles E.\" , \"Guironnet, Damien\" ], \"author\" : [ { \"_id\" : \"507f191e810c19729de860ec\" , \"name\" : \"Dylan W\" } ], \"journal\" : \"Macromolecules\" , \"publisher\" : \"American Chemical Society\" , \"year\" : \"2019\" , \"vol\" : 52 , \"issue\" : 13 , \"page\" : \"4847-4857\" , \"doi\" : \"10.1021/acs.macromol.9b00845\" , \"issn\" : \"0024-9297\" , \"web\" : \"http://pubs.acs.org/doi/10.1021/acs.macromol.9b00845\" , \"group\" : [ { \"_id\" : \"507f191e810c19729de860em\" , \"name\" : \"UIUC\" } ] } }","title":"Publications"},{"location":"data-models/Publications/#publications","text":"The 'publication' node contains data related to a publication. Publication nodes can be generated at any time in the research process, and experiments can be associated with the publication. The version number can be used to determine the stage of the publication. Features: publication can reference users, groups, experiments required information title optional information collections (CRIPT nodes) title authors journal publisher year vol issue pages doi issn arxiv_id PMID website notes auto generate/update: _id class ver_sch ver_con (& all child) <-- update with version control node date (& all child) App features to support this node: a page to fill out publication details a tool to look up experiments, or enter _id a similar look up tool for users, and groups allow additional optional information in attribute section given that it begins with +","title":"Publications"},{"location":"data-models/Publications/#json-schema","text":"{ \"_id\" : objec t Id() , \"class\" : \"pub\" , \"ver_sch\" : s tr i n g , \"ver_con\" : { \"_id\" : objec t Id() , \"num\" : s tr i n g }, \"date\" : [ { \"created\" : da tet ime }, { \"last_mod\" : da tet ime } ], \"title\" : s tr i n g , \"optional attributes\" }","title":"JSON Schema"},{"location":"data-models/Publications/#description","text":"Key Data Type Required Description _id objectId() auto unique database id class string auto class of node ver_sch string auto schema version; Ex: \"v0.1\" ver_con version control object ver_con/_id objectId() auto reference id to node history ver_con/num string auto type of node ; Ex: \"group\" date datetime object date/created datetime auto datetime created type/last_mod datetime auto last modified datetime title string required publication title","title":"Description"},{"location":"data-models/Publications/#attributes","text":"Attributes are optional properties that can be associated with this node. The following list is the officially supported keys. Users may define their own keys by placing a '+' in front of their custom key. Key Data Type Description coll collection nodes coll\\_id objectId() id of collection coll\\name string name of collection coll\\date datetime date collection created authors list[string] authors author list[dict] authors details author\\orcid objectId() author ORCID number author\\name string author name journal string journal publisher string publisher year int publishing year vol int volume number issue int issue number pages string page number doi string DOI: digital object identifier issn string ISSN: international standard serial number arxiv_id string arXiv identifier PMID string PubMed ID web string publication website note string free-form space to store any text","title":"Attributes"},{"location":"data-models/Publications/#example","text":"{ \"_id\" : \"507f191e810c19729de861ec\" , \"type\" : \"pub\" , \"ver_sch\" : \"v0.1\" , \"ver_con\" : { \"_id\" : \"507f191e810c19729de861cb\" , \"num\" : \"v2.1\" }, \"date\" : [ { \"created\" : 1612881183 }, { \"last_mod\" : 1612881123 } ], \"notes\" : \"\" , \"users\" : [ { \"_id\" : \"507f191e810c19729de860ec\" , \"name\" : \"Dylan W\" , \"perm\" : \"w\" } ], \"expt\" : [ { \"_id\" : \"507f191e810c19729de860em\" , \"name\" : \"ROMP monomer order kinetic study\" , \"date\" : 1612886423 }, { \"_id\" : \"507f191e810c19729de860en\" , \"name\" : \"PLA bottlebrush synthesis\" , \"date\" : 1612886423 }, { \"_id\" : \"507f191e810c19729de860ej\" , \"name\" : \"ROP of lactide kinetics\" , \"date\" : 1612886423 } ], \"attr\" : { \"title\" : \"Engineering of Molecular Geometry in Bottlebrush Polymers\" , \"authors\" : [ \"Walsh, Dylan J.\" , \"Dutta, Sarit\" , \"Sing, Charles E.\" , \"Guironnet, Damien\" ], \"author\" : [ { \"_id\" : \"507f191e810c19729de860ec\" , \"name\" : \"Dylan W\" } ], \"journal\" : \"Macromolecules\" , \"publisher\" : \"American Chemical Society\" , \"year\" : \"2019\" , \"vol\" : 52 , \"issue\" : 13 , \"page\" : \"4847-4857\" , \"doi\" : \"10.1021/acs.macromol.9b00845\" , \"issn\" : \"0024-9297\" , \"web\" : \"http://pubs.acs.org/doi/10.1021/acs.macromol.9b00845\" , \"group\" : [ { \"_id\" : \"507f191e810c19729de860em\" , \"name\" : \"UIUC\" } ] } }","title":"Example"},{"location":"data-models/Sample/","text":"Sample \u00b6 The 'sample' node contains procedure and property information. A sample can be anything from that doesn't result in a change in the \"identity\". Features: sample node points to data required information name procedure optional information data (CRIPT node) conditions properties note auto generate/update: _id class ver_sch ver_con (& all child) <-- update with version control node date (& all child) App features to support this node: allow additional optional information in cond section given that it begins with + units are not stored for officially supported data as all official values are converted to database standard prior to storage JSON Schema \u00b6 { \"_id\" : objec t Id() , \"class\" : \"sample\" , \"ver_sch\" : s tr i n g , \"ver_con\" : { \"_id\" : objec t Id() , \"num\" : s tr i n g }, \"date\" : [ { \"created\" : da tet ime }, { \"last_mod\" : da tet ime } ], \"name\" : s tr i n g , \"procedure\" : s tr i n g , \"product\" : [{ \"_id\" : objec t Id() , \"name\" : s tr i n g }], \"optional attributes\" } Description \u00b6 Key Data Type Required Description _id objectId() auto unique database id class string auto class of node ver_sch string auto schema version; Ex: \"v0.1\" ver_con version control object ver_con/_id objectId() auto reference id to node history ver_con/num string auto type of node ; Ex: \"group\" date datetime object date/created datetime auto datetime created type/last_mod datetime auto last modified datetime name string required name of process procedure string required written procedure for the process Attributes \u00b6 Attributes are optional properties that can be associated with this node. The following list is the officially supported keys. Users may define their own keys by placing a '+' in front of their custom key. Key Data Type Description data list[dict] data node data/_id objectId() id of data data/name string name of data data/type string type of data cond list[dict] see condition section prop list[dict] see condition section note string free-form space to store any text Conditions \u00b6 Conditions are any process variable that the user would like to explicitly expose. Conditions such as temperature, pressure, or reaction times are examples. The conditions are stored in a dictionary. Units are only used for user defined attributes which begin with a + . { \"key\" : s tr i n g , \"method\" : s tr i n g , \"value\" : double , \"uncer\" : double , \"unit\" : s tr i n g , \"data\" : { \"_id\" : Objec t ID , \"name\" : s tr i n g , \"type\" : s tr i n g }, \"note\" : \"string\" } key Units Description time min time temp degC temperature pres kPa pressure (absolute) Properties \u00b6 For information on properties see Materials node Example \u00b6 { \"_id\" : \"507f191e810c19729de860ec\" , \"type\" : \"process\" , \"ver_sch\" : \"v0.1\" , \"ver_con\" : { \"_id\" : \"507f191e810c19729de860cb\" , \"num\" : \"v0.1\" }, \"date\" : [ { \"created\" : 1612889183 }, { \"last_mod\" : 1612889123 } ], }","title":"Sample"},{"location":"data-models/Sample/#sample","text":"The 'sample' node contains procedure and property information. A sample can be anything from that doesn't result in a change in the \"identity\". Features: sample node points to data required information name procedure optional information data (CRIPT node) conditions properties note auto generate/update: _id class ver_sch ver_con (& all child) <-- update with version control node date (& all child) App features to support this node: allow additional optional information in cond section given that it begins with + units are not stored for officially supported data as all official values are converted to database standard prior to storage","title":"Sample"},{"location":"data-models/Sample/#json-schema","text":"{ \"_id\" : objec t Id() , \"class\" : \"sample\" , \"ver_sch\" : s tr i n g , \"ver_con\" : { \"_id\" : objec t Id() , \"num\" : s tr i n g }, \"date\" : [ { \"created\" : da tet ime }, { \"last_mod\" : da tet ime } ], \"name\" : s tr i n g , \"procedure\" : s tr i n g , \"product\" : [{ \"_id\" : objec t Id() , \"name\" : s tr i n g }], \"optional attributes\" }","title":"JSON Schema"},{"location":"data-models/Sample/#description","text":"Key Data Type Required Description _id objectId() auto unique database id class string auto class of node ver_sch string auto schema version; Ex: \"v0.1\" ver_con version control object ver_con/_id objectId() auto reference id to node history ver_con/num string auto type of node ; Ex: \"group\" date datetime object date/created datetime auto datetime created type/last_mod datetime auto last modified datetime name string required name of process procedure string required written procedure for the process","title":"Description"},{"location":"data-models/Sample/#attributes","text":"Attributes are optional properties that can be associated with this node. The following list is the officially supported keys. Users may define their own keys by placing a '+' in front of their custom key. Key Data Type Description data list[dict] data node data/_id objectId() id of data data/name string name of data data/type string type of data cond list[dict] see condition section prop list[dict] see condition section note string free-form space to store any text","title":"Attributes"},{"location":"data-models/Sample/#conditions","text":"Conditions are any process variable that the user would like to explicitly expose. Conditions such as temperature, pressure, or reaction times are examples. The conditions are stored in a dictionary. Units are only used for user defined attributes which begin with a + . { \"key\" : s tr i n g , \"method\" : s tr i n g , \"value\" : double , \"uncer\" : double , \"unit\" : s tr i n g , \"data\" : { \"_id\" : Objec t ID , \"name\" : s tr i n g , \"type\" : s tr i n g }, \"note\" : \"string\" } key Units Description time min time temp degC temperature pres kPa pressure (absolute)","title":"Conditions"},{"location":"data-models/Sample/#properties","text":"For information on properties see Materials node","title":"Properties"},{"location":"data-models/Sample/#example","text":"{ \"_id\" : \"507f191e810c19729de860ec\" , \"type\" : \"process\" , \"ver_sch\" : \"v0.1\" , \"ver_con\" : { \"_id\" : \"507f191e810c19729de860cb\" , \"num\" : \"v0.1\" }, \"date\" : [ { \"created\" : 1612889183 }, { \"last_mod\" : 1612889123 } ], }","title":"Example"},{"location":"data-models/Users/","text":"User \u00b6 The 'user' node contains data related to the user. Anyone who interacts with the database can be a user. Features: user can reference groups, collections, publications, and experiments required information name email optional information group (CRIPT node) publications (CRIPT node) collections (CRIPT node) experiments (CRIPT node) phone website twitter handle ORCID # organization notes auto generate/update: _id class ver_sch ver_con (& all child) <-- update with version control node date (& all child) App features to support this node: a page to fill out: name, email, etc a tool to look up group, or enter _id a similar look up tool for experiments, collections, and publications allow additional optional information in attribute section given that it begins with + JSON Schema \u00b6 { \"_id\" : objec t Id() , \"class\" : \"user\" , \"ver_sch\" : s tr i n g , \"ver_con\" : { \"_id\" : objec t Id() , \"num\" : s tr i n g }, \"date\" : [ { \"created\" : da tet ime }, { \"last_mod\" : da tet ime } ], \"name\" : s tr i n g , \"email\" : s tr i n g , \"optional attributes\" } Description \u00b6 Key Data Type Required Description _id objectId() auto unique database id class string auto class of node ver_sch string auto schema version; Ex: \"v0.1\" ver_con version control object ver_con/_id objectId() auto reference id to node history ver_con/num string auto type of node ; Ex: \"group\" date datetime object date/created datetime auto datetime created type/last_mod datetime auto last modified datetime name string required name of user email string required user email address Attributes \u00b6 Attributes are optional properties that can be associated with this node. The following list is the officially supported keys. Users may define their own keys by placing a '+' in front of their custom key. Key Data Type Description group list[dict] groups that the user belongs to group\\_id objectId() id of group group\\name string name of group pub list[dict] publications the user authored pub\\_id objectId() id of publication pub\\title string title of publication expt list[dict] experiment nodes expt\\_id objectId() id of experiment expt\\name string name of experiment expt\\date datetime date of experiment coll list[dict] collection nodes coll\\_id objectId() id of collection coll\\name string name of collection coll\\date datetime date of collection phone string phone number (###-###-####) web string website twitter string twitter handle orcid string ORCID number organization string author's organization position string author's position in organization note string free-form space to store any text Example \u00b6 { \"_id\" : \"507f191e810c19729de860ec\" , \"type\" : \"user\" , \"ver_sch\" : \"v0.1\" , \"ver_con\" : { \"_id\" : \"507f191e810c19729de860cb\" , \"num\" : \"v0.1\" }, \"date\" : [ { \"created\" : 1612889183 }, { \"last_mod\" : 1612889123 } ], \"notes\" : \"\" , \"users\" : [ { \"_id\" : \"507f191e810c19729de860ec\" , \"name\" : \"Dylan W\" , \"perm\" : \"w\" } ], \"name\" : \"Dylan W\" , \"email\" : \"dylan@cript.edu\" , \"attr\" : { \"phone\" : \"123-456-7890\" , \"orcid\" : \"0000-0000-0000-0001\" , \"organization\" : \"MIT\" , \"position\" : \"Research Assistant\" , \"group\" : [ { \"_id\" : \"507f191e810c19729de860em\" , \"name\" : \"MIT\" }, { \"_id\" : \"507f191e810c19729de860en\" , \"name\" : \"CRIPT\" } ], \"pub\" : [ { \"_id\" : \"507f191e810c19729de860eq\" , \"name\" : \"Recent trends in catalytic polymerizations\" }, { \"_id\" : \"507f191e810c19729de860er\" , \"name\" : \"Kinetic study of living ring-opening metathesis polymerization with third-generation Grubbs catalysts\" } ], \"expt\" : [ { \"_id\" : \"507f191e810c19729de860em\" , \"name\" : \"Anionic polymerization\" , \"date\" : 1612886423 }, { \"_id\" : \"507f191e810c19729de860en\" , \"name\" : \"ATRP of styrene with CuCl\" , \"date\" : 1612886423 }, { \"_id\" : \"507f191e810c19729de860ej\" , \"name\" : \"ROMP catalyst kinetics low conc\" , \"date\" : 1612886423 }, { \"_id\" : \"507f191e810c19729de860er\" , \"name\" : \"ROMP catalyst kinetics high conc\" , \"date\" : 1612886426 }, { \"_id\" : \"507f191e810c19729de860er\" , \"name\" : \"ROMP monomer kinetics\" , \"date\" : 1612886426 } ] }, \"coll\" : [ { \"_id\" : \"507f191e810c19729de860em\" , \"name\" : \"ROMP kinetic study\" , \"date\" : 1612886423 , \"num_expt\" : 3 } ] }","title":"Users"},{"location":"data-models/Users/#user","text":"The 'user' node contains data related to the user. Anyone who interacts with the database can be a user. Features: user can reference groups, collections, publications, and experiments required information name email optional information group (CRIPT node) publications (CRIPT node) collections (CRIPT node) experiments (CRIPT node) phone website twitter handle ORCID # organization notes auto generate/update: _id class ver_sch ver_con (& all child) <-- update with version control node date (& all child) App features to support this node: a page to fill out: name, email, etc a tool to look up group, or enter _id a similar look up tool for experiments, collections, and publications allow additional optional information in attribute section given that it begins with +","title":"User"},{"location":"data-models/Users/#json-schema","text":"{ \"_id\" : objec t Id() , \"class\" : \"user\" , \"ver_sch\" : s tr i n g , \"ver_con\" : { \"_id\" : objec t Id() , \"num\" : s tr i n g }, \"date\" : [ { \"created\" : da tet ime }, { \"last_mod\" : da tet ime } ], \"name\" : s tr i n g , \"email\" : s tr i n g , \"optional attributes\" }","title":"JSON Schema"},{"location":"data-models/Users/#description","text":"Key Data Type Required Description _id objectId() auto unique database id class string auto class of node ver_sch string auto schema version; Ex: \"v0.1\" ver_con version control object ver_con/_id objectId() auto reference id to node history ver_con/num string auto type of node ; Ex: \"group\" date datetime object date/created datetime auto datetime created type/last_mod datetime auto last modified datetime name string required name of user email string required user email address","title":"Description"},{"location":"data-models/Users/#attributes","text":"Attributes are optional properties that can be associated with this node. The following list is the officially supported keys. Users may define their own keys by placing a '+' in front of their custom key. Key Data Type Description group list[dict] groups that the user belongs to group\\_id objectId() id of group group\\name string name of group pub list[dict] publications the user authored pub\\_id objectId() id of publication pub\\title string title of publication expt list[dict] experiment nodes expt\\_id objectId() id of experiment expt\\name string name of experiment expt\\date datetime date of experiment coll list[dict] collection nodes coll\\_id objectId() id of collection coll\\name string name of collection coll\\date datetime date of collection phone string phone number (###-###-####) web string website twitter string twitter handle orcid string ORCID number organization string author's organization position string author's position in organization note string free-form space to store any text","title":"Attributes"},{"location":"data-models/Users/#example","text":"{ \"_id\" : \"507f191e810c19729de860ec\" , \"type\" : \"user\" , \"ver_sch\" : \"v0.1\" , \"ver_con\" : { \"_id\" : \"507f191e810c19729de860cb\" , \"num\" : \"v0.1\" }, \"date\" : [ { \"created\" : 1612889183 }, { \"last_mod\" : 1612889123 } ], \"notes\" : \"\" , \"users\" : [ { \"_id\" : \"507f191e810c19729de860ec\" , \"name\" : \"Dylan W\" , \"perm\" : \"w\" } ], \"name\" : \"Dylan W\" , \"email\" : \"dylan@cript.edu\" , \"attr\" : { \"phone\" : \"123-456-7890\" , \"orcid\" : \"0000-0000-0000-0001\" , \"organization\" : \"MIT\" , \"position\" : \"Research Assistant\" , \"group\" : [ { \"_id\" : \"507f191e810c19729de860em\" , \"name\" : \"MIT\" }, { \"_id\" : \"507f191e810c19729de860en\" , \"name\" : \"CRIPT\" } ], \"pub\" : [ { \"_id\" : \"507f191e810c19729de860eq\" , \"name\" : \"Recent trends in catalytic polymerizations\" }, { \"_id\" : \"507f191e810c19729de860er\" , \"name\" : \"Kinetic study of living ring-opening metathesis polymerization with third-generation Grubbs catalysts\" } ], \"expt\" : [ { \"_id\" : \"507f191e810c19729de860em\" , \"name\" : \"Anionic polymerization\" , \"date\" : 1612886423 }, { \"_id\" : \"507f191e810c19729de860en\" , \"name\" : \"ATRP of styrene with CuCl\" , \"date\" : 1612886423 }, { \"_id\" : \"507f191e810c19729de860ej\" , \"name\" : \"ROMP catalyst kinetics low conc\" , \"date\" : 1612886423 }, { \"_id\" : \"507f191e810c19729de860er\" , \"name\" : \"ROMP catalyst kinetics high conc\" , \"date\" : 1612886426 }, { \"_id\" : \"507f191e810c19729de860er\" , \"name\" : \"ROMP monomer kinetics\" , \"date\" : 1612886426 } ] }, \"coll\" : [ { \"_id\" : \"507f191e810c19729de860em\" , \"name\" : \"ROMP kinetic study\" , \"date\" : 1612886423 , \"num_expt\" : 3 } ] }","title":"Example"},{"location":"data-models/Version_Control/","text":"Version Control \u00b6 The version control implemented in CRIPT is JSON Patch . JSON Patch is a format for describing changes to a JSON document. Using a patch approach avoids saving the whole document when only a part of it has changed. The file can only be created and appended to; no deletions allowed. JSON Schema \u00b6 { \"_id\" : objec t Id() , \"class\" : \"vs_###\" , \"ver_sch\" : s tr i n g , \"date\" : [ { \"created\" : da tet ime }, { \"last_mod\" : da tet ime } ], \"id_child\" : objec t Id() , \"patches\" : [ { \"_id\" : objec t Id() \", \" na me_ \": string, \" da te \": datetime, \" n o tes \": string, \" ver_ nu m \": string, \" cha n ges \": [ {\" op \": string, \" pa t h \": string, \" value\": any} ] } ] } Description \u00b6 Key Data Type Required Description _id objectId() auto unique database id type string auto type of node ; Ex: \"group\" ver_sch string auto schema version; Ex: \"v0.1\" date datetime object date/created datetime auto datetime created type/last_mod datetime auto last modified datetime id_child objectId() auto id of node that the file is storing patches for patches document history patches/_id string auto id of user who made change patches/name string auto name of user who made change patches/data datetime auto date and time when changes were made patches/notes string optional notes about change patches/ver_num string auto version number of patch patches/changes dict auto JSON Patch Example \u00b6 { \"_id\" : \"507f191e810c19729de861ec\" , \"class\" : \"vs_mat\" , \"ver_sch\" : \"v0.1\" , \"date\" : [ { \"created\" : 1612881183 }, { \"last_mod\" : 1612881123 } ], \"id_child\" : \"507f191e810c19729de861ec\" , \"patches\" : [ { \"_id\" : \"507f191e810c19729de860ec\" , \"name_\" : \"Dylan W\" , \"date\" : 1612881123 , \"notes\" : \"updating material data\" , \"ver_num\" : \"v0.2\" , \"changes\" : [ { \"op\" : \"replace\" , \"path\" : \"/proc/0/role\" , \"value\" : [ \"prod\" ]}, { \"op\" : \"add\" , \"path\" : \"/iden/cas\" , \"value\" : \"9003-53-6\" }, { \"op\" : \"remove\" , \"path\" : \"/prop/3\" } ] }, { \"_iduser\" : \"507f191e810c19729de860ec\" , \"name_user\" : \"Dylan W\" , \"date\" : 1612881126 , \"notes\" : \"updating material data again\" , \"ver_num\" : \"v0.3\" , \"changes\" : [ { \"op\" : \"replace\" , \"path\" : \"/prop/1/value\" , \"value\" : 5200 }, { \"op\" : \"add\" , \"path\" : \"/prop\" , \"value\" : { \"key\" : \"d\" , \"method\" : \"sec\" , \"value\" : 1.03 , \"uncertainty\" : 0.02 , \"attr\" : { \"data\" : { \"_id\" : \"507f191e810c19729de860em\" , \"key\" : \"sec\" }} } }, { \"op\" : \"remove\" , \"path\" : \"/data/2\" } ] } ] }","title":"Version Control"},{"location":"data-models/Version_Control/#version-control","text":"The version control implemented in CRIPT is JSON Patch . JSON Patch is a format for describing changes to a JSON document. Using a patch approach avoids saving the whole document when only a part of it has changed. The file can only be created and appended to; no deletions allowed.","title":"Version Control"},{"location":"data-models/Version_Control/#json-schema","text":"{ \"_id\" : objec t Id() , \"class\" : \"vs_###\" , \"ver_sch\" : s tr i n g , \"date\" : [ { \"created\" : da tet ime }, { \"last_mod\" : da tet ime } ], \"id_child\" : objec t Id() , \"patches\" : [ { \"_id\" : objec t Id() \", \" na me_ \": string, \" da te \": datetime, \" n o tes \": string, \" ver_ nu m \": string, \" cha n ges \": [ {\" op \": string, \" pa t h \": string, \" value\": any} ] } ] }","title":"JSON Schema"},{"location":"data-models/Version_Control/#description","text":"Key Data Type Required Description _id objectId() auto unique database id type string auto type of node ; Ex: \"group\" ver_sch string auto schema version; Ex: \"v0.1\" date datetime object date/created datetime auto datetime created type/last_mod datetime auto last modified datetime id_child objectId() auto id of node that the file is storing patches for patches document history patches/_id string auto id of user who made change patches/name string auto name of user who made change patches/data datetime auto date and time when changes were made patches/notes string optional notes about change patches/ver_num string auto version number of patch patches/changes dict auto JSON Patch","title":"Description"},{"location":"data-models/Version_Control/#example","text":"{ \"_id\" : \"507f191e810c19729de861ec\" , \"class\" : \"vs_mat\" , \"ver_sch\" : \"v0.1\" , \"date\" : [ { \"created\" : 1612881183 }, { \"last_mod\" : 1612881123 } ], \"id_child\" : \"507f191e810c19729de861ec\" , \"patches\" : [ { \"_id\" : \"507f191e810c19729de860ec\" , \"name_\" : \"Dylan W\" , \"date\" : 1612881123 , \"notes\" : \"updating material data\" , \"ver_num\" : \"v0.2\" , \"changes\" : [ { \"op\" : \"replace\" , \"path\" : \"/proc/0/role\" , \"value\" : [ \"prod\" ]}, { \"op\" : \"add\" , \"path\" : \"/iden/cas\" , \"value\" : \"9003-53-6\" }, { \"op\" : \"remove\" , \"path\" : \"/prop/3\" } ] }, { \"_iduser\" : \"507f191e810c19729de860ec\" , \"name_user\" : \"Dylan W\" , \"date\" : 1612881126 , \"notes\" : \"updating material data again\" , \"ver_num\" : \"v0.3\" , \"changes\" : [ { \"op\" : \"replace\" , \"path\" : \"/prop/1/value\" , \"value\" : 5200 }, { \"op\" : \"add\" , \"path\" : \"/prop\" , \"value\" : { \"key\" : \"d\" , \"method\" : \"sec\" , \"value\" : 1.03 , \"uncertainty\" : 0.02 , \"attr\" : { \"data\" : { \"_id\" : \"507f191e810c19729de860em\" , \"key\" : \"sec\" }} } }, { \"op\" : \"remove\" , \"path\" : \"/data/2\" } ] } ] }","title":"Example"},{"location":"software-tools/","text":"CRIPT API \u00b6 Documentation of the Python-based API to represent, store, search, and retrieve polymers data within CRIPT.","title":"CRIPT API"},{"location":"software-tools/#cript-api","text":"Documentation of the Python-based API to represent, store, search, and retrieve polymers data within CRIPT.","title":"CRIPT API"},{"location":"web-application/","text":"CRIPT Web Application \u00b6 Documentation of the CRIPT web application and related user interfaces.","title":"CRIPT Web Application"},{"location":"web-application/#cript-web-application","text":"Documentation of the CRIPT web application and related user interfaces.","title":"CRIPT Web Application"}]}